language: julia
dist: xenial

os:
  - linux
  - osx

# requires MacOS 10.14
osx_image: xcode11.4

julia:
  - 1.3
  - 1.4
  - nightly

branches:
  only:
    - master
    - /^release-.*/
    - /^v\d+\.\d+(\.\d+)?(-\S*)?$/

notifications:
  email: false

cache:
  directories:
  - $HOME/.ccache
  - $HOME/.julia/registries # can we cache all of .julia?
  - $HOME/.julia/artifacts

env:
  - MPI_IMPL=none
  - MPI_IMPL=none
    JULIA_MPI_BINARY=OpenMPI_jll
    JULIA_MPIEXEC_TEST_ARGS="--oversubscribe"
  - MPI_IMPL=mpich
    JULIA_MPI_BINARY=system
  - MPI_IMPL=openmpi
    JULIA_MPI_BINARY=system
    JULIA_MPIEXEC_TEST_ARGS="--oversubscribe"
  - MPI_IMPL=intelmpi
    JULIA_MPI_BINARY=system
  - MPI_IMPL=mpich
    JULIA_MPI_BINARY=system
    JULIA_MPI_ABI=unknown
  - MPI_IMPL=openmpi
    JULIA_MPI_BINARY=system
    JULIA_MPI_ABI=unknown
    JULIA_MPIEXEC_TEST_ARGS="--oversubscribe"

matrix:
  allow_failures: # issue 262
  - julia: nightly
  - os: osx
    env: MPI_IMPL=openmpi
  exclude:
  - os: osx
    env: MPI_IMPL=intelmpi JULIA_MPI_BINARY=system
before_install:
  - sh ./conf/travis-install-mpi.sh $MPI_IMPL
  - |
    if [ "$TRAVIS_OS_NAME" == "linux" ]; then
      if [ "$MPI_IMPL" == "intelmpi" ]; then
        source $HOME/intel/compilers_and_libraries/linux/mpi/intel64/bin/mpivars.sh release
      elif [ "$MPI_IMPL" != "none" ]; then
        export JULIA_MPI_PATH=$HOME/$MPI_IMPL
      fi
    elif [ "$TRAVIS_OS_NAME" == "osx" ]; then
      if [ "$MPI_IMPL" != "none" ]; then
        # dlopen on Julia 1.4 no longer searches /usr/local/lib on Mac
        export JULIA_MPI_PATH="/usr/local"
      fi
    fi
# Work around OpenMPI attempting to create overly long temporary
# file names - and erroring as a result
  - export TMPDIR=/tmp
# Work around MacOS/OpenMPI issue:
#   https://github.com/open-mpi/ompi/issues/6518
#   https://github.com/open-mpi/ompi/issues/5798
  - export OMPI_MCA_btl=self,tcp

jobs:
  include:
    - stage: "Tests" # implicit first stage
    - stage: "Documentation"
      julia: 1.0
      os: linux
      script:
        - export DOCUMENTER_DEBUG="true"
        - julia --color=yes --project=docs/ -e 'using Pkg;
                                                      Pkg.develop(PackageSpec(path=pwd()));
                                                      Pkg.instantiate();
                                                      Pkg.build()'
        - julia --color=yes --project=docs/ docs/make.jl
    - stage: "Coverage"
      julia: 1.0
      os: linux
      after_success: # Intentionally rerun tests
        - julia -e 'using Pkg; cd(Pkg.dir("MPI")); Pkg.add("Coverage")'
        - julia -e 'using Coverage; Coveralls.submit(Coveralls.process_folder())'
        - julia -e 'using Coverage; Codecov.submit(Codecov.process_folder())'
