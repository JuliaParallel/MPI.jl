name: Unit Tests

on:
  pull_request:

  push:
    branches:
      - master

jobs:
#WORKS   test-jll:
#WORKS     timeout-minutes: 20
#WORKS     strategy:
#WORKS       matrix:
#WORKS         os:
#WORKS           - macos-latest
#WORKS           - ubuntu-latest
#WORKS           - windows-latest
#WORKS         julia_version:
#WORKS           # Unsupported - "1.3"
#WORKS           # Unsupported - "1.4"
#WORKS           # Unsupported - "1.5"
#WORKS           - "1.6"
#WORKS           - "1.7-nightly"
#WORKS           - "nightly"
#WORKS         julia_arch: [x64, x86]
#WORKS         exclude:
#WORKS           - os: macos-latest
#WORKS             julia_arch: x86
#WORKS 
#WORKS       fail-fast: false
#WORKS 
#WORKS     runs-on: ${{ matrix.os }}
#WORKS     env:
#WORKS       JULIA_MPIEXEC_ARGS: ${{ matrix.mpiexec_args }}
#WORKS 
#WORKS     steps:
#WORKS     - name: Cancel Previous Runs
#WORKS       uses: styfle/cancel-workflow-action@0.4.0
#WORKS       with:
#WORKS         access_token: ${{ github.token }}
#WORKS 
#WORKS     - name: Checkout
#WORKS       uses: actions/checkout@v2.2.0
#WORKS 
#WORKS     - uses: julia-actions/setup-julia@latest
#WORKS       with:
#WORKS         arch: ${{ matrix.julia_arch }}
#WORKS         version: ${{ matrix.julia_version }}
#WORKS 
#WORKS     # https://discourse.julialang.org/t/recommendation-cache-julia-artifacts-in-ci-services/35484
#WORKS     - name: Cache artifacts
#WORKS       uses: actions/cache@v1
#WORKS       env:
#WORKS         cache-name: cache-artifacts
#WORKS       with:
#WORKS         path: ~/.julia/artifacts
#WORKS         key: ${{ runner.os }}-test-${{ env.cache-name }}-${{ hashFiles('**/Project.toml') }}
#WORKS         restore-keys: |
#WORKS           ${{ runner.os }}-test-${{ env.cache-name }}-
#WORKS           ${{ runner.os }}-test-
#WORKS           ${{ runner.os }}-
#WORKS 
#WORKS     - uses: julia-actions/julia-buildpkg@latest
#WORKS     - uses: julia-actions/julia-runtest@latest


  test-system-brew:
    timeout-minutes: 20
    strategy:
      matrix:
        mpi:
          - mpich
          #TODO - openmpi
        julia_version:
          - "1.6"
          # We don't need to test all combinations
          #TODO
          - "1.7-nightly"
          - "nightly"

      fail-fast: false

    runs-on: macos-latest

    env:
      JULIA_MPI_BINARY: system
      JULIA_MPI_PATH: /usr/local

    steps:
    - name: Cancel Previous Runs
      uses: styfle/cancel-workflow-action@0.4.0
      with:
        access_token: ${{ github.token }}

    - name: Checkout
      uses: actions/checkout@v2.2.0

    - name: Install MPI via homebrew
      run: brew install $MPI
      env:
        MPI: ${{ matrix.mpi }}

    - uses: julia-actions/setup-julia@latest
      with:
        version: ${{ matrix.julia_version }}

    # https://discourse.julialang.org/t/recommendation-cache-julia-artifacts-in-ci-services/35484
    - name: Cache artifacts
      uses: actions/cache@v1
      env:
        cache-name: cache-artifacts
      with:
        path: ~/.julia/artifacts
        key: ${{ runner.os }}-test-${{ env.cache-name }}-${{ hashFiles('**/Project.toml') }}
        restore-keys: |
          ${{ runner.os }}-test-${{ env.cache-name }}-
          ${{ runner.os }}-test-
          ${{ runner.os }}-

    - uses: julia-actions/julia-buildpkg@latest
    - uses: julia-actions/julia-runtest@latest
      env:
        # TODO: Only disable this test for MPICH. OpenMPI works fine.
        JULIA_MPI_TEST_DISABLE_REDUCE_ON_APPLE: 1


#WORKS   test-system-apt:
#WORKS     timeout-minutes: 20
#WORKS     strategy:
#WORKS       matrix:
#WORKS         mpi:
#WORKS           - libmpich-dev
#WORKS           - libopenmpi-dev
#WORKS         julia_version:
#WORKS           - "1.6"
#WORKS           # We don't need to test all combinations
#WORKS           # - "1.7-nightly"
#WORKS           # - "nightly"
#WORKS 
#WORKS       fail-fast: false
#WORKS 
#WORKS     runs-on: ubuntu-20.04
#WORKS 
#WORKS     env:
#WORKS       JULIA_MPI_BINARY: system
#WORKS       JULIA_MPI_PATH: /usr
#WORKS       OMPI_MCA_btl_base_warn_component_unused: 0
#WORKS 
#WORKS     steps:
#WORKS     - name: Cancel Previous Runs
#WORKS       uses: styfle/cancel-workflow-action@0.4.0
#WORKS       with:
#WORKS         access_token: ${{ github.token }}
#WORKS 
#WORKS     - name: Checkout
#WORKS       uses: actions/checkout@v2.2.0
#WORKS 
#WORKS     - name: Install MPI via apt
#WORKS       run: sudo apt-get install $MPI
#WORKS       env:
#WORKS         MPI: ${{ matrix.mpi }}
#WORKS 
#WORKS     - uses: julia-actions/setup-julia@latest
#WORKS       with:
#WORKS         version: ${{ matrix.julia_version }}
#WORKS 
#WORKS     # https://discourse.julialang.org/t/recommendation-cache-julia-artifacts-in-ci-services/35484
#WORKS     - name: Cache artifacts
#WORKS       uses: actions/cache@v1
#WORKS       env:
#WORKS         cache-name: cache-artifacts
#WORKS       with:
#WORKS         path: ~/.julia/artifacts
#WORKS         key: ${{ runner.os }}-test-${{ env.cache-name }}-${{ hashFiles('**/Project.toml') }}
#WORKS         restore-keys: |
#WORKS           ${{ runner.os }}-test-${{ env.cache-name }}-
#WORKS           ${{ runner.os }}-test-
#WORKS           ${{ runner.os }}-
#WORKS 
#WORKS     - uses: julia-actions/julia-buildpkg@latest
#WORKS     - uses: julia-actions/julia-runtest@latest
#WORKS 
#WORKS 
#WORKS   test-intel-linux:
#WORKS     timeout-minutes: 20
#WORKS     strategy:
#WORKS       matrix:
#WORKS         julia_version:
#WORKS           - "1.6"
#WORKS           # We don't need to test all combinations
#WORKS           # - "1.7-nightly"
#WORKS           # - "nightly"
#WORKS 
#WORKS       fail-fast: false
#WORKS 
#WORKS     runs-on: ubuntu-18.04  # 20.04 not supported
#WORKS 
#WORKS     env:
#WORKS       JULIA_MPI_BINARY: system
#WORKS       JULIA_MPI_PATH: /home/runner/intel/compilers_and_libraries_2020.4.304/linux/mpi/intel64
#WORKS 
#WORKS     steps:
#WORKS     - name: Cancel Previous Runs
#WORKS       uses: styfle/cancel-workflow-action@0.4.0
#WORKS       with:
#WORKS         access_token: ${{ github.token }}
#WORKS 
#WORKS     - name: Checkout
#WORKS       uses: actions/checkout@v2.2.0
#WORKS 
#WORKS     - name: Cache Intel MPI
#WORKS       id: cache-intelmpi
#WORKS       uses: actions/cache@v2
#WORKS       with:
#WORKS         path: l_mpi_2019.9.304.tgz
#WORKS         key: ${{ runner.os }}-intelmpi-2019.9.304
#WORKS 
#WORKS     - name: Download Intel MPI
#WORKS       if: steps.cache-intelmpi.outputs.cache-hit != 'true'
#WORKS       run: wget https://registrationcenter-download.intel.com/akdlm/irc_nas/tec/17263/l_mpi_2019.9.304.tgz
#WORKS 
#WORKS     - name: Install Intel MPI
#WORKS       run: |        
#WORKS         tar -xzf l_mpi_2019.9.304.tgz
#WORKS         pushd l_mpi_2019.9.304
#WORKS         cat << EOF > intel.conf
#WORKS         ACCEPT_EULA=accept
#WORKS         CONTINUE_WITH_OPTIONAL_ERROR=yes
#WORKS         PSET_INSTALL_DIR=${HOME}/intel
#WORKS         CONTINUE_WITH_INSTALLDIR_OVERWRITE=yes
#WORKS         PSET_MODE=install
#WORKS         ARCH_SELECTED=ALL
#WORKS         COMPONENTS=;intel-conda-index-tool__x86_64;intel-comp-l-all-vars__noarch;intel-comp-nomcu-vars__noarch;intel-imb__x86_64;intel-mpi-rt__x86_64;intel-mpi-sdk__x86_64;intel-mpi-doc__x86_64;intel-mpi-samples__x86_64;intel-mpi-installer-license__x86_64;intel-conda-impi_rt-linux-64-shadow-package__x86_64;intel-conda-impi-devel-linux-64-shadow-package__x86_64;intel-mpi-psxe__x86_64;intel-psxe-common__noarch;intel-compxe-pset
#WORKS         EOF
#WORKS         ./install.sh --silent intel.conf
#WORKS         popd
#WORKS 
#WORKS     - uses: julia-actions/setup-julia@latest
#WORKS       with:
#WORKS         version: ${{ matrix.julia_version }}
#WORKS 
#WORKS     # https://discourse.julialang.org/t/recommendation-cache-julia-artifacts-in-ci-services/35484
#WORKS     - name: Cache artifacts
#WORKS       uses: actions/cache@v1
#WORKS       env:
#WORKS         cache-name: cache-artifacts
#WORKS       with:
#WORKS         path: ~/.julia/artifacts
#WORKS         key: ${{ runner.os }}-test-${{ env.cache-name }}-${{ hashFiles('**/Project.toml') }}
#WORKS         restore-keys: |
#WORKS           ${{ runner.os }}-test-${{ env.cache-name }}-
#WORKS           ${{ runner.os }}-test-
#WORKS           ${{ runner.os }}-
#WORKS 
#WORKS     # we can't use the usual actions here as we need to ensure the environment variables are set
#WORKS     - name: "Build package" 
#WORKS       run: |
#WORKS         source ${HOME}/intel/compilers_and_libraries/linux/mpi/intel64/bin/mpivars.sh release
#WORKS         julia --project -e 'using Pkg; Pkg.instantiate(verbose=true); Pkg.build(verbose=true)'
#WORKS     - name: "Run tests"
#WORKS       run: |
#WORKS         source ${HOME}/intel/compilers_and_libraries/linux/mpi/intel64/bin/mpivars.sh release
#WORKS         julia --project -e 'using Pkg; Pkg.test()'
#WORKS 
#WORKS 
#WORKS   test-system-msmpi:
#WORKS     timeout-minutes: 20
#WORKS     strategy:
#WORKS       matrix:
#WORKS         julia_version:
#WORKS           - "1.6"
#WORKS           # We don't need to test all combinations
#WORKS           # - "1.7-nightly"
#WORKS           # - "nightly"
#WORKS 
#WORKS       fail-fast: false
#WORKS 
#WORKS     runs-on: windows-latest
#WORKS 
#WORKS     env:
#WORKS       JULIA_MPI_BINARY: system
#WORKS       JULIA_MPIEXEC: "C:\\Program Files\\Microsoft MPI\\Bin\\mpiexec"
#WORKS 
#WORKS     steps:
#WORKS     - name: Cancel Previous Runs
#WORKS       uses: styfle/cancel-workflow-action@0.4.0
#WORKS       with:
#WORKS         access_token: ${{ github.token }}
#WORKS 
#WORKS     - name: Checkout
#WORKS       uses: actions/checkout@v2.2.0
#WORKS 
#WORKS     - name: Download Microsoft MPI
#WORKS       run: (new-object net.webclient).DownloadFile("https://download.microsoft.com/download/a/5/2/a5207ca5-1203-491a-8fb8-906fd68ae623/msmpisetup.exe", "msmpisetup.exe")
#WORKS       shell: powershell
#WORKS 
#WORKS     - name: Install Microsoft MPI
#WORKS       run: msmpisetup.exe -unattend -minimal
#WORKS       shell: cmd
#WORKS 
#WORKS     - uses: julia-actions/setup-julia@latest
#WORKS       with:
#WORKS         version: ${{ matrix.julia_version }}
#WORKS 
#WORKS     # https://discourse.julialang.org/t/recommendation-cache-julia-artifacts-in-ci-services/35484
#WORKS     - name: Cache artifacts
#WORKS       uses: actions/cache@v1
#WORKS       env:
#WORKS         cache-name: cache-artifacts
#WORKS       with:
#WORKS         path: ~/.julia/artifacts
#WORKS         key: ${{ runner.os }}-test-${{ env.cache-name }}-${{ hashFiles('**/Project.toml') }}
#WORKS         restore-keys: |
#WORKS           ${{ runner.os }}-test-${{ env.cache-name }}-
#WORKS           ${{ runner.os }}-test-
#WORKS           ${{ runner.os }}-
#WORKS 
#WORKS     - uses: julia-actions/julia-buildpkg@latest
#WORKS     - uses: julia-actions/julia-runtest@latest
#WORKS 
#WORKS 
#WORKS   test-mpitrampoline-jll:
#WORKS     timeout-minutes: 20
#WORKS     strategy:
#WORKS       matrix:
#WORKS         os:
#WORKS           - macos-latest
#WORKS           - ubuntu-latest
#WORKS         mpi: [mpitrampoline]
#WORKS         julia_version:
#WORKS           - "1.6"
#WORKS           - "1.7-nightly"
#WORKS           - "nightly"
#WORKS         julia_arch:
#WORKS           - x64
#WORKS           - x86
#WORKS         exclude:
#WORKS           - os: macos-latest
#WORKS             julia_arch: x86
#WORKS 
#WORKS       fail-fast: false
#WORKS 
#WORKS     runs-on: ${{ matrix.os }}
#WORKS 
#WORKS     env:
#WORKS       JULIA_MPI_BINARY: MPItrampoline_jll
#WORKS 
#WORKS     steps:
#WORKS     - name: Cancel Previous Runs
#WORKS       uses: styfle/cancel-workflow-action@0.4.0
#WORKS       with:
#WORKS         access_token: ${{ github.token }}
#WORKS 
#WORKS     - name: Checkout
#WORKS       uses: actions/checkout@v2.2.0
#WORKS 
#WORKS     - uses: julia-actions/setup-julia@latest
#WORKS       with:
#WORKS         version: ${{ matrix.julia_version }}
#WORKS 
#WORKS     # https://discourse.julialang.org/t/recommendation-cache-julia-artifacts-in-ci-services/35484
#WORKS     - name: Cache artifacts
#WORKS       uses: actions/cache@v1
#WORKS       env:
#WORKS         cache-name: cache-artifacts
#WORKS       with:
#WORKS         path: ~/.julia/artifacts
#WORKS         key: ${{ runner.os }}-test-${{ env.cache-name }}-${{ hashFiles('**/Project.toml') }}
#WORKS         restore-keys: |
#WORKS           ${{ runner.os }}-test-${{ env.cache-name }}-
#WORKS           ${{ runner.os }}-test-
#WORKS           ${{ runner.os }}-
#WORKS 
#WORKS     - uses: julia-actions/julia-buildpkg@latest
#WORKS     - uses: julia-actions/julia-runtest@latest
#WORKS 
#WORKS 
#WORKS #TIMEOUT   test-mpitrampoline-system-macos:
#WORKS #TIMEOUT     timeout-minutes: 20
#WORKS #TIMEOUT     strategy:
#WORKS #TIMEOUT       matrix:
#WORKS #TIMEOUT         mpi:
#WORKS #TIMEOUT           - mpich
#WORKS #TIMEOUT           - openmpi
#WORKS #TIMEOUT         julia_version:
#WORKS #TIMEOUT           - "1.6"
#WORKS #TIMEOUT           - "1.7-nightly"
#WORKS #TIMEOUT           - "nightly"
#WORKS #TIMEOUT 
#WORKS #TIMEOUT       fail-fast: false
#WORKS #TIMEOUT 
#WORKS #TIMEOUT     runs-on: macos-latest
#WORKS #TIMEOUT 
#WORKS #TIMEOUT     env:
#WORKS #TIMEOUT       JULIA_MPI_BINARY: MPItrampoline_jll
#WORKS #TIMEOUT       MPITRAMPOLINE_VERBOSE: 1   #TODO
#WORKS #TIMEOUT       MPITRAMPOLINE_LIB: /usr/local/lib/libmpiwrapper.so
#WORKS #TIMEOUT       MPITRAMPOLINE_MPIEXEC: /usr/local/bin/mpiexec
#WORKS #TIMEOUT 
#WORKS #TIMEOUT     steps:
#WORKS #TIMEOUT     - name: Cancel Previous Runs
#WORKS #TIMEOUT       uses: styfle/cancel-workflow-action@0.4.0
#WORKS #TIMEOUT       with:
#WORKS #TIMEOUT         access_token: ${{ github.token }}
#WORKS #TIMEOUT 
#WORKS #TIMEOUT     - name: Checkout
#WORKS #TIMEOUT       uses: actions/checkout@v2.2.0
#WORKS #TIMEOUT 
#WORKS #TIMEOUT     - name: Install Homebrew packages
#WORKS #TIMEOUT       run: brew install autoconf automake
#WORKS #TIMEOUT       env:
#WORKS #TIMEOUT         MPI: ${{ matrix.mpi }}
#WORKS #TIMEOUT 
#WORKS #TIMEOUT     # We cannot install MPICH or OpenMPI via Homebrew or MacPorts,
#WORKS #TIMEOUT     # since the MPI libraries there use a flat namespace, which means
#WORKS #TIMEOUT     # that they cannot be loaded as plugin. We need to build the
#WORKS #TIMEOUT     # libraries ourselves.
#WORKS #TIMEOUT     - name: Install MPI
#WORKS #TIMEOUT       run: |
#WORKS #TIMEOUT         case ${{ matrix.mpi }} in
#WORKS #TIMEOUT         mpich)
#WORKS #TIMEOUT             # Install MPICH 4.0.b1 (a beta version) since 3.4.2 has a
#WORKS #TIMEOUT             # bug in MPI_Reduce
#WORKS #TIMEOUT             wget http://www.mpich.org/static/downloads/4.0b1/mpich-4.0b1.tar.gz
#WORKS #TIMEOUT             tar xzf mpich-4.0b1.tar.gz
#WORKS #TIMEOUT             cd mpich*
#WORKS #TIMEOUT             ./configure \
#WORKS #TIMEOUT                 --enable-two-level-namespace \
#WORKS #TIMEOUT                 --prefix=/usr/local \
#WORKS #TIMEOUT                 CC=gcc-11 \
#WORKS #TIMEOUT                 CXX=g++-11 \
#WORKS #TIMEOUT                 FC=gfortran-11 \
#WORKS #TIMEOUT                 FFLAGS=-fallow-argument-mismatch \
#WORKS #TIMEOUT                 FCFLAGS=-fallow-argument-mismatch
#WORKS #TIMEOUT             make -j$(nproc) 
#WORKS #TIMEOUT             sudo make -j$(nproc) install
#WORKS #TIMEOUT         ;;
#WORKS #TIMEOUT         openmpi)
#WORKS #TIMEOUT             wget https://download.open-mpi.org/release/open-mpi/v4.1/openmpi-4.1.2.tar.gz
#WORKS #TIMEOUT             tar xzf openmpi-4.1.2.tar.gz
#WORKS #TIMEOUT             cd openmpi*
#WORKS #TIMEOUT             find . -type f -print0 | xargs -0 perl -pi -e 's/-Wl,-flat_namespace//g'
#WORKS #TIMEOUT             ./autogen.pl --force
#WORKS #TIMEOUT             ./configure \
#WORKS #TIMEOUT                 --prefix=/usr/local \
#WORKS #TIMEOUT                 CC=gcc-11 \
#WORKS #TIMEOUT                 CXX=g++-11 \
#WORKS #TIMEOUT                 FC=gfortran-11
#WORKS #TIMEOUT             make -j$(nproc) 
#WORKS #TIMEOUT             sudo make -j$(nproc) install
#WORKS #TIMEOUT         ;;
#WORKS #TIMEOUT         esac
#WORKS #TIMEOUT       env:
#WORKS #TIMEOUT         MPI: ${{ matrix.mpi }}
#WORKS #TIMEOUT 
#WORKS #TIMEOUT     - name: Build MPIwrapper
#WORKS #TIMEOUT       run: |
#WORKS #TIMEOUT         wget https://github.com/eschnett/MPIwrapper/archive/refs/tags/v2.2.1.tar.gz
#WORKS #TIMEOUT         tar xzf v2.2.1.tar.gz
#WORKS #TIMEOUT         cd MPIwrapper-*
#WORKS #TIMEOUT         cmake \
#WORKS #TIMEOUT             -DCMAKE_CXX_COMPILER=g++-11 \
#WORKS #TIMEOUT             -DCMAKE_Fortran_COMPILER=gfortran-11 \
#WORKS #TIMEOUT             -DMPIEXEC_EXECUTABLE=mpiexec \
#WORKS #TIMEOUT             -DCMAKE_BUILD_TYPE=Debug \
#WORKS #TIMEOUT             -DCMAKE_INSTALL_PREFIX=/usr/local \
#WORKS #TIMEOUT             .
#WORKS #TIMEOUT         # cmake \
#WORKS #TIMEOUT         #     -DCMAKE_CXX_COMPILER=g++-11 \
#WORKS #TIMEOUT         #     -DCMAKE_Fortran_COMPILER=gfortran-11 \
#WORKS #TIMEOUT         #     -DMPI_CXX_ADDITIONAL_INCLUDE_DIRS=/usr/local/include \
#WORKS #TIMEOUT         #     -DMPI_CXX_ADDITIONAL_INCLUDE_DIRS=/usr/local/include \
#WORKS #TIMEOUT         #     -DMPI_CXX_LIB_NAMES='mpi' \
#WORKS #TIMEOUT         #     -DMPI_Fortran_ADDITIONAL_INCLUDE_DIRS='/usr/local/include;/usr/local/lib' \
#WORKS #TIMEOUT         #     -DMPI_Fortran_LIB_NAMES='mpi_usempif08;mpi_usempi_ignore_tkr;mpi_mpifh;mpi' \
#WORKS #TIMEOUT         #     -DMPI_mpi_LIBRARY=/usr/local/lib/libmpi.dylib \
#WORKS #TIMEOUT         #     -DMPI_mpi_mpifh_LIBRARY=/usr/local/lib/libmpi_mpifh.dylib \
#WORKS #TIMEOUT         #     -DMPI_mpi_usempi_ignore_tkr_LIBRARY=/usr/local/lib/libmpi_usempi_ignore_tkr.dylib \
#WORKS #TIMEOUT         #     -DMPI_mpi_usempif08_LIBRARY=/usr/local/lib/libmpi_usempif08.dylib \
#WORKS #TIMEOUT         #     -DMPIEXEC_EXECUTABLE=/usr/local/bin/mpiexec \
#WORKS #TIMEOUT         #     -DCMAKE_BUILD_TYPE=Debug \
#WORKS #TIMEOUT         #     -DCMAKE_INSTALL_PREFIX=/usr/local \
#WORKS #TIMEOUT         #     .
#WORKS #TIMEOUT         cmake --build .
#WORKS #TIMEOUT         sudo cmake --install .
#WORKS #TIMEOUT 
#WORKS #TIMEOUT     - uses: julia-actions/setup-julia@latest
#WORKS #TIMEOUT       with:
#WORKS #TIMEOUT         version: ${{ matrix.julia_version }}
#WORKS #TIMEOUT 
#WORKS #TIMEOUT     # https://discourse.julialang.org/t/recommendation-cache-julia-artifacts-in-ci-services/35484
#WORKS #TIMEOUT     - name: Cache artifacts
#WORKS #TIMEOUT       uses: actions/cache@v1
#WORKS #TIMEOUT       env:
#WORKS #TIMEOUT         cache-name: cache-artifacts
#WORKS #TIMEOUT       with:
#WORKS #TIMEOUT         path: ~/.julia/artifacts
#WORKS #TIMEOUT         key: ${{ runner.os }}-test-${{ env.cache-name }}-${{ hashFiles('**/Project.toml') }}
#WORKS #TIMEOUT         restore-keys: |
#WORKS #TIMEOUT           ${{ runner.os }}-test-${{ env.cache-name }}-
#WORKS #TIMEOUT           ${{ runner.os }}-test-
#WORKS #TIMEOUT           ${{ runner.os }}-
#WORKS #TIMEOUT 
#WORKS #TIMEOUT     - uses: julia-actions/julia-buildpkg@latest
#WORKS #TIMEOUT     - uses: julia-actions/julia-runtest@latest
#WORKS 
#WORKS 
#WORKS   test-mpitrampoline-system-apt:
#WORKS     timeout-minutes: 20
#WORKS     strategy:
#WORKS       matrix:
#WORKS         mpi:
#WORKS           - libmpich-dev
#WORKS           - libopenmpi-dev
#WORKS         julia_version:
#WORKS           - "1.6"
#WORKS           # We don't need to test all combinations
#WORKS           # - "1.7-nightly"
#WORKS           # - "nightly"
#WORKS 
#WORKS       fail-fast: false
#WORKS 
#WORKS     runs-on: ubuntu-20.04
#WORKS 
#WORKS     env:
#WORKS       JULIA_MPI_BINARY: MPItrampoline_jll
#WORKS       MPITRAMPOLINE_LIB: /usr/local/lib/libmpiwrapper.so
#WORKS       MPITRAMPOLINE_MPIEXEC: /usr/bin/mpiexec
#WORKS       OMPI_MCA_btl_base_warn_component_unused: 0
#WORKS 
#WORKS     steps:
#WORKS     - name: Cancel Previous Runs
#WORKS       uses: styfle/cancel-workflow-action@0.4.0
#WORKS       with:
#WORKS         access_token: ${{ github.token }}
#WORKS 
#WORKS     - name: Checkout
#WORKS       uses: actions/checkout@v2.2.0
#WORKS 
#WORKS     - name: Install MPI via apt
#WORKS       run: sudo apt-get install $MPI
#WORKS       env:
#WORKS         MPI: ${{ matrix.mpi }}
#WORKS 
#WORKS     - name: Build MPIwrapper
#WORKS       run: |
#WORKS         wget https://github.com/eschnett/MPIwrapper/archive/refs/tags/v2.2.1.tar.gz
#WORKS         tar xzf v2.2.1.tar.gz
#WORKS         cd MPIwrapper-*
#WORKS         cmake -DMPIEXEC_EXECUTABLE=mpiexec -DCMAKE_BUILD_TYPE=Debug -DCMAKE_INSTALL_PREFIX=/usr/local .
#WORKS         cmake --build .
#WORKS         sudo cmake --install .
#WORKS 
#WORKS     - uses: julia-actions/setup-julia@latest
#WORKS       with:
#WORKS         version: ${{ matrix.julia_version }}
#WORKS 
#WORKS     # https://discourse.julialang.org/t/recommendation-cache-julia-artifacts-in-ci-services/35484
#WORKS     - name: Cache artifacts
#WORKS       uses: actions/cache@v1
#WORKS       env:
#WORKS         cache-name: cache-artifacts
#WORKS       with:
#WORKS         path: ~/.julia/artifacts
#WORKS         key: ${{ runner.os }}-test-${{ env.cache-name }}-${{ hashFiles('**/Project.toml') }}
#WORKS         restore-keys: |
#WORKS           ${{ runner.os }}-test-${{ env.cache-name }}-
#WORKS           ${{ runner.os }}-test-
#WORKS           ${{ runner.os }}-
#WORKS 
#WORKS     - uses: julia-actions/julia-buildpkg@latest
#WORKS     - uses: julia-actions/julia-runtest@latest
#WORKS 
#WORKS 
#WORKS   test-mpitrampoline-intel-linux:
#WORKS     timeout-minutes: 20
#WORKS     strategy:
#WORKS       matrix:
#WORKS         julia_version:
#WORKS           - "1.6"
#WORKS           # We don't need to test all combinations
#WORKS           # - "1.7-nightly"
#WORKS           # - "nightly"
#WORKS 
#WORKS       fail-fast: false
#WORKS 
#WORKS     runs-on: ubuntu-18.04  # 20.04 not supported
#WORKS 
#WORKS     env:
#WORKS       JULIA_MPI_BINARY: MPItrampoline_jll
#WORKS       MPITRAMPOLINE_LIB: /usr/local/lib/libmpiwrapper.so
#WORKS       MPITRAMPOLINE_MPIEXEC: /home/runner/intel/compilers_and_libraries_2020.4.304/linux/mpi/intel64/bin/mpiexec
#WORKS 
#WORKS     steps:
#WORKS     - name: Cancel Previous Runs
#WORKS       uses: styfle/cancel-workflow-action@0.4.0
#WORKS       with:
#WORKS         access_token: ${{ github.token }}
#WORKS 
#WORKS     - name: Checkout
#WORKS       uses: actions/checkout@v2.2.0
#WORKS 
#WORKS     - name: Cache Intel MPI
#WORKS       id: cache-intelmpi
#WORKS       uses: actions/cache@v2
#WORKS       with:
#WORKS         path: l_mpi_2019.9.304.tgz
#WORKS         key: ${{ runner.os }}-intelmpi-2019.9.304
#WORKS 
#WORKS     - name: Download Intel MPI
#WORKS       if: steps.cache-intelmpi.outputs.cache-hit != 'true'
#WORKS       run: wget https://registrationcenter-download.intel.com/akdlm/irc_nas/tec/17263/l_mpi_2019.9.304.tgz
#WORKS 
#WORKS     - name: Install Intel MPI
#WORKS       run: |        
#WORKS         tar -xzf l_mpi_2019.9.304.tgz
#WORKS         pushd l_mpi_2019.9.304
#WORKS         cat << EOF > intel.conf
#WORKS         ACCEPT_EULA=accept
#WORKS         CONTINUE_WITH_OPTIONAL_ERROR=yes
#WORKS         PSET_INSTALL_DIR=${HOME}/intel
#WORKS         CONTINUE_WITH_INSTALLDIR_OVERWRITE=yes
#WORKS         PSET_MODE=install
#WORKS         ARCH_SELECTED=ALL
#WORKS         COMPONENTS=;intel-conda-index-tool__x86_64;intel-comp-l-all-vars__noarch;intel-comp-nomcu-vars__noarch;intel-imb__x86_64;intel-mpi-rt__x86_64;intel-mpi-sdk__x86_64;intel-mpi-doc__x86_64;intel-mpi-samples__x86_64;intel-mpi-installer-license__x86_64;intel-conda-impi_rt-linux-64-shadow-package__x86_64;intel-conda-impi-devel-linux-64-shadow-package__x86_64;intel-mpi-psxe__x86_64;intel-psxe-common__noarch;intel-compxe-pset
#WORKS         EOF
#WORKS         ./install.sh --silent intel.conf
#WORKS         popd
#WORKS 
#WORKS     - name: Build MPIwrapper
#WORKS       run: |
#WORKS         source ${HOME}/intel/compilers_and_libraries/linux/mpi/intel64/bin/mpivars.sh release
#WORKS         wget https://github.com/eschnett/MPIwrapper/archive/refs/tags/v2.2.1.tar.gz
#WORKS         tar xzf v2.2.1.tar.gz
#WORKS         cd MPIwrapper-*
#WORKS         cmake \
#WORKS             -DMPIEXEC_EXECUTABLE=mpiexec \
#WORKS             -DCMAKE_BUILD_TYPE=Debug \
#WORKS             -DCMAKE_INSTALL_PREFIX=/usr/local \
#WORKS             .
#WORKS         cmake --build .
#WORKS         sudo cmake --install .
#WORKS 
#WORKS     - uses: julia-actions/setup-julia@latest
#WORKS       with:
#WORKS         version: ${{ matrix.julia_version }}
#WORKS 
#WORKS     # https://discourse.julialang.org/t/recommendation-cache-julia-artifacts-in-ci-services/35484
#WORKS     - name: Cache artifacts
#WORKS       uses: actions/cache@v1
#WORKS       env:
#WORKS         cache-name: cache-artifacts
#WORKS       with:
#WORKS         path: ~/.julia/artifacts
#WORKS         key: ${{ runner.os }}-test-${{ env.cache-name }}-${{ hashFiles('**/Project.toml') }}
#WORKS         restore-keys: |
#WORKS           ${{ runner.os }}-test-${{ env.cache-name }}-
#WORKS           ${{ runner.os }}-test-
#WORKS           ${{ runner.os }}-
#WORKS 
#WORKS     # We can't use the usual actions here as we need to ensure the environment variables are set
#WORKS     - name: "Build package" 
#WORKS       run: |
#WORKS         source ${HOME}/intel/compilers_and_libraries/linux/mpi/intel64/bin/mpivars.sh release
#WORKS         julia --project -e 'using Pkg; Pkg.instantiate(verbose=true); Pkg.build(verbose=true)'
#WORKS     - name: "Run tests"
#WORKS       run: |
#WORKS         source ${HOME}/intel/compilers_and_libraries/linux/mpi/intel64/bin/mpivars.sh release
#WORKS         julia --project -e 'using Pkg; Pkg.test()'
