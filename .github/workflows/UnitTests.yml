name: Unit Tests

on:
  pull_request:

  push:
    branches:
      - master

jobs:
#WORKS   test-jll:
#WORKS     timeout-minutes: 20
#WORKS     strategy:
#WORKS       matrix:
#WORKS         os:
#WORKS           - macos-latest
#WORKS           - ubuntu-latest
#WORKS           - windows-latest
#WORKS         julia_version:
#WORKS           # Unsupported - "1.3"
#WORKS           # Unsupported - "1.4"
#WORKS           # Unsupported - "1.5"
#WORKS           - "1.6"
#WORKS           - "1.7-nightly"
#WORKS           - "nightly"
#WORKS         julia_arch: [x64, x86]
#WORKS         exclude:
#WORKS           - os: macos-latest
#WORKS             julia_arch: x86
#WORKS 
#WORKS       fail-fast: false
#WORKS 
#WORKS     runs-on: ${{ matrix.os }}
#WORKS     env:
#WORKS       JULIA_MPIEXEC_ARGS: ${{ matrix.mpiexec_args }}
#WORKS 
#WORKS     steps:
#WORKS     - name: Cancel Previous Runs
#WORKS       uses: styfle/cancel-workflow-action@0.4.0
#WORKS       with:
#WORKS         access_token: ${{ github.token }}
#WORKS 
#WORKS     - name: Checkout
#WORKS       uses: actions/checkout@v2.2.0
#WORKS 
#WORKS     - uses: julia-actions/setup-julia@latest
#WORKS       with:
#WORKS         arch: ${{ matrix.julia_arch }}
#WORKS         version: ${{ matrix.julia_version }}
#WORKS 
#WORKS     # https://discourse.julialang.org/t/recommendation-cache-julia-artifacts-in-ci-services/35484
#WORKS     - name: Cache artifacts
#WORKS       uses: actions/cache@v1
#WORKS       env:
#WORKS         cache-name: cache-artifacts
#WORKS       with:
#WORKS         path: ~/.julia/artifacts
#WORKS         key: ${{ runner.os }}-test-${{ env.cache-name }}-${{ hashFiles('**/Project.toml') }}
#WORKS         restore-keys: |
#WORKS           ${{ runner.os }}-test-${{ env.cache-name }}-
#WORKS           ${{ runner.os }}-test-
#WORKS           ${{ runner.os }}-
#WORKS 
#WORKS     - uses: julia-actions/julia-buildpkg@latest
#WORKS     - uses: julia-actions/julia-runtest@latest
#WORKS 
#WORKS 
#WORKS   test-binary-mpitrampoline:
#WORKS     timeout-minutes: 20
#WORKS     strategy:
#WORKS       matrix:
#WORKS         os:
#WORKS           - macos-latest
#WORKS           - ubuntu-latest
#WORKS         mpi: [mpitrampoline]
#WORKS         julia_version:
#WORKS           - "1.6"
#WORKS           - "1.7-nightly"
#WORKS           - "nightly"
#WORKS         julia_arch:
#WORKS           - x64
#WORKS           - x86
#WORKS         exclude:
#WORKS           - os: macos-latest
#WORKS             julia_arch: x86
#WORKS 
#WORKS       fail-fast: false
#WORKS 
#WORKS     runs-on: ${{ matrix.os }}
#WORKS 
#WORKS     env:
#WORKS       JULIA_MPI_BINARY: MPItrampoline_jll
#WORKS 
#WORKS     steps:
#WORKS     - name: Cancel Previous Runs
#WORKS       uses: styfle/cancel-workflow-action@0.4.0
#WORKS       with:
#WORKS         access_token: ${{ github.token }}
#WORKS 
#WORKS     - name: Checkout
#WORKS       uses: actions/checkout@v2.2.0
#WORKS 
#WORKS     - uses: julia-actions/setup-julia@latest
#WORKS       with:
#WORKS         version: ${{ matrix.julia_version }}
#WORKS 
#WORKS     # https://discourse.julialang.org/t/recommendation-cache-julia-artifacts-in-ci-services/35484
#WORKS     - name: Cache artifacts
#WORKS       uses: actions/cache@v1
#WORKS       env:
#WORKS         cache-name: cache-artifacts
#WORKS       with:
#WORKS         path: ~/.julia/artifacts
#WORKS         key: ${{ runner.os }}-test-${{ env.cache-name }}-${{ hashFiles('**/Project.toml') }}
#WORKS         restore-keys: |
#WORKS           ${{ runner.os }}-test-${{ env.cache-name }}-
#WORKS           ${{ runner.os }}-test-
#WORKS           ${{ runner.os }}-
#WORKS 
#WORKS     #TODO:
#WORKS     - name: Switch to dev version of MPItrampoline_jll
#WORKS       run: |
#WORKS         # This adds the desired version of `MPItrampoline_jll`
#WORKS         # successfully, but then fails to precompile `MPI`. We don't
#WORKS         # care about this failure here. Later on, precompiling `MPI`
#WORKS         # should succeed.
#WORKS         julia --project=@. -e 'using Pkg; Pkg.add(url="https://github.com/eschnett/MPItrampoline_jll.jl")' || true
#WORKS 
#WORKS     - uses: julia-actions/julia-buildpkg@latest
#WORKS     - uses: julia-actions/julia-runtest@latest


  test-system-brew:
    timeout-minutes: 20
    strategy:
      matrix:
        mpi: [mpich, openmpi]
        julia_version: ["1.6", "1.7-nightly", "nightly"]

      fail-fast: false

    runs-on: macos-latest

    env:
      JULIA_MPI_BINARY: system
      JULIA_MPI_PATH: /usr/local

    steps:
    - name: Cancel Previous Runs
      uses: styfle/cancel-workflow-action@0.4.0
      with:
        access_token: ${{ github.token }}

    - name: Checkout
      uses: actions/checkout@v2.2.0

    - name: Install MPI via homebrew
      run: brew install $MPI
      env:
        MPI: ${{ matrix.mpi }}

    - uses: julia-actions/setup-julia@latest
      with:
        version: ${{ matrix.julia_version }}

    # https://discourse.julialang.org/t/recommendation-cache-julia-artifacts-in-ci-services/35484
    - name: Cache artifacts
      uses: actions/cache@v1
      env:
        cache-name: cache-artifacts
      with:
        path: ~/.julia/artifacts
        key: ${{ runner.os }}-test-${{ env.cache-name }}-${{ hashFiles('**/Project.toml') }}
        restore-keys: |
          ${{ runner.os }}-test-${{ env.cache-name }}-
          ${{ runner.os }}-test-
          ${{ runner.os }}-

    - uses: julia-actions/julia-buildpkg@latest
    - uses: julia-actions/julia-runtest@latest


  test-system-apt:
    timeout-minutes: 20
    strategy:
      matrix:
        mpi: [mpich, libopenmpi-dev]
        julia_version: ["1.6", "1.7-nightly", "nightly"]

      fail-fast: false

    runs-on: ubuntu-20.04

    env:
      JULIA_MPI_BINARY: system
      JULIA_MPI_PATH: /usr
      OMPI_MCA_btl_base_warn_component_unused: 0

    steps:
    - name: Cancel Previous Runs
      uses: styfle/cancel-workflow-action@0.4.0
      with:
        access_token: ${{ github.token }}

    - name: Checkout
      uses: actions/checkout@v2.2.0

    - name: Install MPI via apt
      run: sudo apt-get install $MPI
      env:
        MPI: ${{ matrix.mpi }}

    - uses: julia-actions/setup-julia@latest
      with:
        version: ${{ matrix.julia_version }}

    # https://discourse.julialang.org/t/recommendation-cache-julia-artifacts-in-ci-services/35484
    - name: Cache artifacts
      uses: actions/cache@v1
      env:
        cache-name: cache-artifacts
      with:
        path: ~/.julia/artifacts
        key: ${{ runner.os }}-test-${{ env.cache-name }}-${{ hashFiles('**/Project.toml') }}
        restore-keys: |
          ${{ runner.os }}-test-${{ env.cache-name }}-
          ${{ runner.os }}-test-
          ${{ runner.os }}-

    - uses: julia-actions/julia-buildpkg@latest
    - uses: julia-actions/julia-runtest@latest


  test-intel-linux:
    timeout-minutes: 20
    strategy:
      matrix:
        julia_version: ["1.6", "1.7-nightly", "nightly"]

      fail-fast: false

    runs-on: ubuntu-18.04  # 20.04 not supported

    env:
      JULIA_MPI_BINARY: system
      JULIA_MPI_PATH: /home/runner/intel/compilers_and_libraries_2020.4.304/linux/mpi/intel64

    steps:
    - name: Cancel Previous Runs
      uses: styfle/cancel-workflow-action@0.4.0
      with:
        access_token: ${{ github.token }}

    - name: Checkout
      uses: actions/checkout@v2.2.0

    - name: Cache Intel MPI
      id: cache-intelmpi
      uses: actions/cache@v2
      with:
        path: l_mpi_2019.9.304.tgz
        key: ${{ runner.os }}-intelmpi-2019.9.304

    - name: Download Intel MPI
      if: steps.cache-intelmpi.outputs.cache-hit != 'true'
      run: wget https://registrationcenter-download.intel.com/akdlm/irc_nas/tec/17263/l_mpi_2019.9.304.tgz

    - name: Install Intel MPI
      run: |        
        tar -xzf l_mpi_2019.9.304.tgz
        pushd l_mpi_2019.9.304
        cat << EOF > intel.conf
        ACCEPT_EULA=accept
        CONTINUE_WITH_OPTIONAL_ERROR=yes
        PSET_INSTALL_DIR=${HOME}/intel
        CONTINUE_WITH_INSTALLDIR_OVERWRITE=yes
        PSET_MODE=install
        ARCH_SELECTED=ALL
        COMPONENTS=;intel-conda-index-tool__x86_64;intel-comp-l-all-vars__noarch;intel-comp-nomcu-vars__noarch;intel-imb__x86_64;intel-mpi-rt__x86_64;intel-mpi-sdk__x86_64;intel-mpi-doc__x86_64;intel-mpi-samples__x86_64;intel-mpi-installer-license__x86_64;intel-conda-impi_rt-linux-64-shadow-package__x86_64;intel-conda-impi-devel-linux-64-shadow-package__x86_64;intel-mpi-psxe__x86_64;intel-psxe-common__noarch;intel-compxe-pset
        EOF
        ./install.sh --silent intel.conf
        popd

    - uses: julia-actions/setup-julia@latest
      with:
        version: ${{ matrix.julia_version }}

    # https://discourse.julialang.org/t/recommendation-cache-julia-artifacts-in-ci-services/35484
    - name: Cache artifacts
      uses: actions/cache@v1
      env:
        cache-name: cache-artifacts
      with:
        path: ~/.julia/artifacts
        key: ${{ runner.os }}-test-${{ env.cache-name }}-${{ hashFiles('**/Project.toml') }}
        restore-keys: |
          ${{ runner.os }}-test-${{ env.cache-name }}-
          ${{ runner.os }}-test-
          ${{ runner.os }}-

    # we can't use the usual actions here as we need to ensure the environment variables are set
    - name: "Build package" 
      run: |
        source ${HOME}/intel/compilers_and_libraries/linux/mpi/intel64/bin/mpivars.sh release
        julia --project -e 'using Pkg; Pkg.instantiate(verbose=true); Pkg.build(verbose=true)'
    - name: "Run tests"
      run: |
        source ${HOME}/intel/compilers_and_libraries/linux/mpi/intel64/bin/mpivars.sh release
        julia --project -e 'using Pkg; Pkg.test()'


  test-system-msmpi:
    timeout-minutes: 20
    strategy:
      matrix:
        julia_version: ["1.6", "1.7-nightly", "nightly"]

      fail-fast: false

    runs-on: windows-latest

    env:
      JULIA_MPI_BINARY: system
      JULIA_MPIEXEC: "C:\\Program Files\\Microsoft MPI\\Bin\\mpiexec"

    steps:
    - name: Cancel Previous Runs
      uses: styfle/cancel-workflow-action@0.4.0
      with:
        access_token: ${{ github.token }}

    - name: Checkout
      uses: actions/checkout@v2.2.0

    - name: Download Microsoft MPI
      run: (new-object net.webclient).DownloadFile("https://download.microsoft.com/download/a/5/2/a5207ca5-1203-491a-8fb8-906fd68ae623/msmpisetup.exe", "msmpisetup.exe")
      shell: powershell

    - name: Install Microsoft MPI
      run: msmpisetup.exe -unattend -minimal
      shell: cmd

    - uses: julia-actions/setup-julia@latest
      with:
        version: ${{ matrix.julia_version }}

    # https://discourse.julialang.org/t/recommendation-cache-julia-artifacts-in-ci-services/35484
    - name: Cache artifacts
      uses: actions/cache@v1
      env:
        cache-name: cache-artifacts
      with:
        path: ~/.julia/artifacts
        key: ${{ runner.os }}-test-${{ env.cache-name }}-${{ hashFiles('**/Project.toml') }}
        restore-keys: |
          ${{ runner.os }}-test-${{ env.cache-name }}-
          ${{ runner.os }}-test-
          ${{ runner.os }}-

    - uses: julia-actions/julia-buildpkg@latest
    - uses: julia-actions/julia-runtest@latest
