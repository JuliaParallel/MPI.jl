# This reads in the load-time MPI constants. They were declared
# earlier with dummy values in the file
# `define_load_time_mpi_constants.jl`.

function read_load_time_mpi_constants()

if !Sys.iswindows()

    Consts.MPI_ANY_SOURCE[] = unsafe_load(cglobal((:MPICONSTANTS_ANY_SOURCE, libmpiconstants), Cint))
    Consts.MPI_ANY_TAG[] = unsafe_load(cglobal((:MPICONSTANTS_ANY_TAG, libmpiconstants), Cint))
    Consts.MPI_PROC_NULL[] = unsafe_load(cglobal((:MPICONSTANTS_PROC_NULL, libmpiconstants), Cint))
    Consts.MPI_ROOT[] = unsafe_load(cglobal((:MPICONSTANTS_ROOT, libmpiconstants), Cint))
    Consts.MPI_CART[] = unsafe_load(cglobal((:MPICONSTANTS_CART, libmpiconstants), Cint))
    Consts.MPI_DIST_GRAPH[] = unsafe_load(cglobal((:MPICONSTANTS_DIST_GRAPH, libmpiconstants), Cint))
    Consts.MPI_GRAPH[] = unsafe_load(cglobal((:MPICONSTANTS_GRAPH, libmpiconstants), Cint))
    Consts.MPI_CONGRUENT[] = unsafe_load(cglobal((:MPICONSTANTS_CONGRUENT, libmpiconstants), Cint))
    Consts.MPI_IDENT[] = unsafe_load(cglobal((:MPICONSTANTS_IDENT, libmpiconstants), Cint))
    Consts.MPI_SIMILAR[] = unsafe_load(cglobal((:MPICONSTANTS_SIMILAR, libmpiconstants), Cint))
    Consts.MPI_UNEQUAL[] = unsafe_load(cglobal((:MPICONSTANTS_UNEQUAL, libmpiconstants), Cint))
    Consts.MPI_KEYVAL_INVALID[] = unsafe_load(cglobal((:MPICONSTANTS_KEYVAL_INVALID, libmpiconstants), Cint))
    Consts.MPI_UNDEFINED[] = unsafe_load(cglobal((:MPICONSTANTS_UNDEFINED, libmpiconstants), Cint))
    Consts.MPI_APPNUM[] = unsafe_load(cglobal((:MPICONSTANTS_APPNUM, libmpiconstants), Cint))
    Consts.MPI_HOST[] = unsafe_load(cglobal((:MPICONSTANTS_HOST, libmpiconstants), Cint))
    Consts.MPI_IO[] = unsafe_load(cglobal((:MPICONSTANTS_IO, libmpiconstants), Cint))
    Consts.MPI_LASTUSEDCODE[] = unsafe_load(cglobal((:MPICONSTANTS_LASTUSEDCODE, libmpiconstants), Cint))
    Consts.MPI_TAG_UB[] = unsafe_load(cglobal((:MPICONSTANTS_TAG_UB, libmpiconstants), Cint))
    Consts.MPI_UNIVERSE_SIZE[] = unsafe_load(cglobal((:MPICONSTANTS_UNIVERSE_SIZE, libmpiconstants), Cint))
    Consts.MPI_WIN_BASE[] = unsafe_load(cglobal((:MPICONSTANTS_WIN_BASE, libmpiconstants), Cint))
    Consts.MPI_WIN_CREATE_FLAVOR[] = unsafe_load(cglobal((:MPICONSTANTS_WIN_CREATE_FLAVOR, libmpiconstants), Cint))
    Consts.MPI_WIN_DISP_UNIT[] = unsafe_load(cglobal((:MPICONSTANTS_WIN_DISP_UNIT, libmpiconstants), Cint))
    Consts.MPI_WIN_MODEL[] = unsafe_load(cglobal((:MPICONSTANTS_WIN_MODEL, libmpiconstants), Cint))
    Consts.MPI_WIN_SIZE[] = unsafe_load(cglobal((:MPICONSTANTS_WIN_SIZE, libmpiconstants), Cint))
    Consts.MPI_WTIME_IS_GLOBAL[] = unsafe_load(cglobal((:MPICONSTANTS_WTIME_IS_GLOBAL, libmpiconstants), Cint))
    Consts.MPI_COMBINER_CONTIGUOUS[] = unsafe_load(cglobal((:MPICONSTANTS_COMBINER_CONTIGUOUS, libmpiconstants), Cint))
    Consts.MPI_COMBINER_DARRAY[] = unsafe_load(cglobal((:MPICONSTANTS_COMBINER_DARRAY, libmpiconstants), Cint))
    Consts.MPI_COMBINER_DUP[] = unsafe_load(cglobal((:MPICONSTANTS_COMBINER_DUP, libmpiconstants), Cint))
    Consts.MPI_COMBINER_F90_COMPLEX[] = unsafe_load(cglobal((:MPICONSTANTS_COMBINER_F90_COMPLEX, libmpiconstants), Cint))
    Consts.MPI_COMBINER_F90_INTEGER[] = unsafe_load(cglobal((:MPICONSTANTS_COMBINER_F90_INTEGER, libmpiconstants), Cint))
    Consts.MPI_COMBINER_F90_REAL[] = unsafe_load(cglobal((:MPICONSTANTS_COMBINER_F90_REAL, libmpiconstants), Cint))
    Consts.MPI_COMBINER_HINDEXED[] = unsafe_load(cglobal((:MPICONSTANTS_COMBINER_HINDEXED, libmpiconstants), Cint))
    Consts.MPI_COMBINER_HINDEXED_BLOCK[] = unsafe_load(cglobal((:MPICONSTANTS_COMBINER_HINDEXED_BLOCK, libmpiconstants), Cint))
    Consts.MPI_COMBINER_HVECTOR[] = unsafe_load(cglobal((:MPICONSTANTS_COMBINER_HVECTOR, libmpiconstants), Cint))
    Consts.MPI_COMBINER_INDEXED[] = unsafe_load(cglobal((:MPICONSTANTS_COMBINER_INDEXED, libmpiconstants), Cint))
    Consts.MPI_COMBINER_INDEXED_BLOCK[] = unsafe_load(cglobal((:MPICONSTANTS_COMBINER_INDEXED_BLOCK, libmpiconstants), Cint))
    Consts.MPI_COMBINER_NAMED[] = unsafe_load(cglobal((:MPICONSTANTS_COMBINER_NAMED, libmpiconstants), Cint))
    Consts.MPI_COMBINER_RESIZED[] = unsafe_load(cglobal((:MPICONSTANTS_COMBINER_RESIZED, libmpiconstants), Cint))
    Consts.MPI_COMBINER_STRUCT[] = unsafe_load(cglobal((:MPICONSTANTS_COMBINER_STRUCT, libmpiconstants), Cint))
    Consts.MPI_COMBINER_SUBARRAY[] = unsafe_load(cglobal((:MPICONSTANTS_COMBINER_SUBARRAY, libmpiconstants), Cint))
    Consts.MPI_COMBINER_VECTOR[] = unsafe_load(cglobal((:MPICONSTANTS_COMBINER_VECTOR, libmpiconstants), Cint))
    Consts.MPI_COMM_TYPE_SHARED[] = unsafe_load(cglobal((:MPICONSTANTS_COMM_TYPE_SHARED, libmpiconstants), Cint))
    Consts.MPI_DISTRIBUTE_BLOCK[] = unsafe_load(cglobal((:MPICONSTANTS_DISTRIBUTE_BLOCK, libmpiconstants), Cint))
    Consts.MPI_DISTRIBUTE_CYCLIC[] = unsafe_load(cglobal((:MPICONSTANTS_DISTRIBUTE_CYCLIC, libmpiconstants), Cint))
    Consts.MPI_DISTRIBUTE_NONE[] = unsafe_load(cglobal((:MPICONSTANTS_DISTRIBUTE_NONE, libmpiconstants), Cint))
    Consts.MPI_ERR_ACCESS[] = unsafe_load(cglobal((:MPICONSTANTS_ERR_ACCESS, libmpiconstants), Cint))
    Consts.MPI_ERR_AMODE[] = unsafe_load(cglobal((:MPICONSTANTS_ERR_AMODE, libmpiconstants), Cint))
    Consts.MPI_ERR_ARG[] = unsafe_load(cglobal((:MPICONSTANTS_ERR_ARG, libmpiconstants), Cint))
    Consts.MPI_ERR_ASSERT[] = unsafe_load(cglobal((:MPICONSTANTS_ERR_ASSERT, libmpiconstants), Cint))
    Consts.MPI_ERR_BAD_FILE[] = unsafe_load(cglobal((:MPICONSTANTS_ERR_BAD_FILE, libmpiconstants), Cint))
    Consts.MPI_ERR_BASE[] = unsafe_load(cglobal((:MPICONSTANTS_ERR_BASE, libmpiconstants), Cint))
    Consts.MPI_ERR_BUFFER[] = unsafe_load(cglobal((:MPICONSTANTS_ERR_BUFFER, libmpiconstants), Cint))
    Consts.MPI_ERR_COMM[] = unsafe_load(cglobal((:MPICONSTANTS_ERR_COMM, libmpiconstants), Cint))
    Consts.MPI_ERR_CONVERSION[] = unsafe_load(cglobal((:MPICONSTANTS_ERR_CONVERSION, libmpiconstants), Cint))
    Consts.MPI_ERR_COUNT[] = unsafe_load(cglobal((:MPICONSTANTS_ERR_COUNT, libmpiconstants), Cint))
    Consts.MPI_ERR_DIMS[] = unsafe_load(cglobal((:MPICONSTANTS_ERR_DIMS, libmpiconstants), Cint))
    Consts.MPI_ERR_DISP[] = unsafe_load(cglobal((:MPICONSTANTS_ERR_DISP, libmpiconstants), Cint))
    Consts.MPI_ERR_DUP_DATAREP[] = unsafe_load(cglobal((:MPICONSTANTS_ERR_DUP_DATAREP, libmpiconstants), Cint))
    Consts.MPI_ERR_FILE[] = unsafe_load(cglobal((:MPICONSTANTS_ERR_FILE, libmpiconstants), Cint))
    Consts.MPI_ERR_FILE_EXISTS[] = unsafe_load(cglobal((:MPICONSTANTS_ERR_FILE_EXISTS, libmpiconstants), Cint))
    Consts.MPI_ERR_FILE_IN_USE[] = unsafe_load(cglobal((:MPICONSTANTS_ERR_FILE_IN_USE, libmpiconstants), Cint))
    Consts.MPI_ERR_GROUP[] = unsafe_load(cglobal((:MPICONSTANTS_ERR_GROUP, libmpiconstants), Cint))
    Consts.MPI_ERR_INFO[] = unsafe_load(cglobal((:MPICONSTANTS_ERR_INFO, libmpiconstants), Cint))
    Consts.MPI_ERR_INFO_KEY[] = unsafe_load(cglobal((:MPICONSTANTS_ERR_INFO_KEY, libmpiconstants), Cint))
    Consts.MPI_ERR_INFO_NOKEY[] = unsafe_load(cglobal((:MPICONSTANTS_ERR_INFO_NOKEY, libmpiconstants), Cint))
    Consts.MPI_ERR_INFO_VALUE[] = unsafe_load(cglobal((:MPICONSTANTS_ERR_INFO_VALUE, libmpiconstants), Cint))
    Consts.MPI_ERR_INTERN[] = unsafe_load(cglobal((:MPICONSTANTS_ERR_INTERN, libmpiconstants), Cint))
    Consts.MPI_ERR_IN_STATUS[] = unsafe_load(cglobal((:MPICONSTANTS_ERR_IN_STATUS, libmpiconstants), Cint))
    Consts.MPI_ERR_IO[] = unsafe_load(cglobal((:MPICONSTANTS_ERR_IO, libmpiconstants), Cint))
    Consts.MPI_ERR_KEYVAL[] = unsafe_load(cglobal((:MPICONSTANTS_ERR_KEYVAL, libmpiconstants), Cint))
    Consts.MPI_ERR_LASTCODE[] = unsafe_load(cglobal((:MPICONSTANTS_ERR_LASTCODE, libmpiconstants), Cint))
    Consts.MPI_ERR_LOCKTYPE[] = unsafe_load(cglobal((:MPICONSTANTS_ERR_LOCKTYPE, libmpiconstants), Cint))
    Consts.MPI_ERR_NAME[] = unsafe_load(cglobal((:MPICONSTANTS_ERR_NAME, libmpiconstants), Cint))
    Consts.MPI_ERR_NOT_SAME[] = unsafe_load(cglobal((:MPICONSTANTS_ERR_NOT_SAME, libmpiconstants), Cint))
    Consts.MPI_ERR_NO_MEM[] = unsafe_load(cglobal((:MPICONSTANTS_ERR_NO_MEM, libmpiconstants), Cint))
    Consts.MPI_ERR_NO_SPACE[] = unsafe_load(cglobal((:MPICONSTANTS_ERR_NO_SPACE, libmpiconstants), Cint))
    Consts.MPI_ERR_NO_SUCH_FILE[] = unsafe_load(cglobal((:MPICONSTANTS_ERR_NO_SUCH_FILE, libmpiconstants), Cint))
    Consts.MPI_ERR_OP[] = unsafe_load(cglobal((:MPICONSTANTS_ERR_OP, libmpiconstants), Cint))
    Consts.MPI_ERR_OTHER[] = unsafe_load(cglobal((:MPICONSTANTS_ERR_OTHER, libmpiconstants), Cint))
    Consts.MPI_ERR_PENDING[] = unsafe_load(cglobal((:MPICONSTANTS_ERR_PENDING, libmpiconstants), Cint))
    Consts.MPI_ERR_PORT[] = unsafe_load(cglobal((:MPICONSTANTS_ERR_PORT, libmpiconstants), Cint))
    Consts.MPI_ERR_QUOTA[] = unsafe_load(cglobal((:MPICONSTANTS_ERR_QUOTA, libmpiconstants), Cint))
    Consts.MPI_ERR_RANK[] = unsafe_load(cglobal((:MPICONSTANTS_ERR_RANK, libmpiconstants), Cint))
    Consts.MPI_ERR_READ_ONLY[] = unsafe_load(cglobal((:MPICONSTANTS_ERR_READ_ONLY, libmpiconstants), Cint))
    Consts.MPI_ERR_REQUEST[] = unsafe_load(cglobal((:MPICONSTANTS_ERR_REQUEST, libmpiconstants), Cint))
    Consts.MPI_ERR_RMA_ATTACH[] = unsafe_load(cglobal((:MPICONSTANTS_ERR_RMA_ATTACH, libmpiconstants), Cint))
    Consts.MPI_ERR_RMA_CONFLICT[] = unsafe_load(cglobal((:MPICONSTANTS_ERR_RMA_CONFLICT, libmpiconstants), Cint))
    Consts.MPI_ERR_RMA_FLAVOR[] = unsafe_load(cglobal((:MPICONSTANTS_ERR_RMA_FLAVOR, libmpiconstants), Cint))
    Consts.MPI_ERR_RMA_RANGE[] = unsafe_load(cglobal((:MPICONSTANTS_ERR_RMA_RANGE, libmpiconstants), Cint))
    Consts.MPI_ERR_RMA_SHARED[] = unsafe_load(cglobal((:MPICONSTANTS_ERR_RMA_SHARED, libmpiconstants), Cint))
    Consts.MPI_ERR_RMA_SYNC[] = unsafe_load(cglobal((:MPICONSTANTS_ERR_RMA_SYNC, libmpiconstants), Cint))
    Consts.MPI_ERR_ROOT[] = unsafe_load(cglobal((:MPICONSTANTS_ERR_ROOT, libmpiconstants), Cint))
    Consts.MPI_ERR_SERVICE[] = unsafe_load(cglobal((:MPICONSTANTS_ERR_SERVICE, libmpiconstants), Cint))
    Consts.MPI_ERR_SIZE[] = unsafe_load(cglobal((:MPICONSTANTS_ERR_SIZE, libmpiconstants), Cint))
    Consts.MPI_ERR_SPAWN[] = unsafe_load(cglobal((:MPICONSTANTS_ERR_SPAWN, libmpiconstants), Cint))
    Consts.MPI_ERR_TAG[] = unsafe_load(cglobal((:MPICONSTANTS_ERR_TAG, libmpiconstants), Cint))
    Consts.MPI_ERR_TOPOLOGY[] = unsafe_load(cglobal((:MPICONSTANTS_ERR_TOPOLOGY, libmpiconstants), Cint))
    Consts.MPI_ERR_TRUNCATE[] = unsafe_load(cglobal((:MPICONSTANTS_ERR_TRUNCATE, libmpiconstants), Cint))
    Consts.MPI_ERR_TYPE[] = unsafe_load(cglobal((:MPICONSTANTS_ERR_TYPE, libmpiconstants), Cint))
    Consts.MPI_ERR_UNKNOWN[] = unsafe_load(cglobal((:MPICONSTANTS_ERR_UNKNOWN, libmpiconstants), Cint))
    Consts.MPI_ERR_UNSUPPORTED_DATAREP[] = unsafe_load(cglobal((:MPICONSTANTS_ERR_UNSUPPORTED_DATAREP, libmpiconstants), Cint))
    Consts.MPI_ERR_UNSUPPORTED_OPERATION[] = unsafe_load(cglobal((:MPICONSTANTS_ERR_UNSUPPORTED_OPERATION, libmpiconstants), Cint))
    Consts.MPI_ERR_WIN[] = unsafe_load(cglobal((:MPICONSTANTS_ERR_WIN, libmpiconstants), Cint))
    # We special-case MPI_SUCCESS which is required to be 0
    # Consts.MPI_SUCCESS[] = unsafe_load(cglobal((:MPICONSTANTS_SUCCESS, libmpiconstants), Cint))
    @assert unsafe_load(cglobal((:MPICONSTANTS_SUCCESS, libmpiconstants), Cint)) == Consts.MPI_SUCCESS[]
    Consts.MPI_LOCK_EXCLUSIVE[] = unsafe_load(cglobal((:MPICONSTANTS_LOCK_EXCLUSIVE, libmpiconstants), Cint))
    Consts.MPI_LOCK_SHARED[] = unsafe_load(cglobal((:MPICONSTANTS_LOCK_SHARED, libmpiconstants), Cint))
    Consts.MPI_MODE_APPEND[] = unsafe_load(cglobal((:MPICONSTANTS_MODE_APPEND, libmpiconstants), Cint))
    Consts.MPI_MODE_CREATE[] = unsafe_load(cglobal((:MPICONSTANTS_MODE_CREATE, libmpiconstants), Cint))
    Consts.MPI_MODE_DELETE_ON_CLOSE[] = unsafe_load(cglobal((:MPICONSTANTS_MODE_DELETE_ON_CLOSE, libmpiconstants), Cint))
    Consts.MPI_MODE_EXCL[] = unsafe_load(cglobal((:MPICONSTANTS_MODE_EXCL, libmpiconstants), Cint))
    Consts.MPI_MODE_NOCHECK[] = unsafe_load(cglobal((:MPICONSTANTS_MODE_NOCHECK, libmpiconstants), Cint))
    Consts.MPI_MODE_NOPRECEDE[] = unsafe_load(cglobal((:MPICONSTANTS_MODE_NOPRECEDE, libmpiconstants), Cint))
    Consts.MPI_MODE_NOPUT[] = unsafe_load(cglobal((:MPICONSTANTS_MODE_NOPUT, libmpiconstants), Cint))
    Consts.MPI_MODE_NOSTORE[] = unsafe_load(cglobal((:MPICONSTANTS_MODE_NOSTORE, libmpiconstants), Cint))
    Consts.MPI_MODE_NOSUCCEED[] = unsafe_load(cglobal((:MPICONSTANTS_MODE_NOSUCCEED, libmpiconstants), Cint))
    Consts.MPI_MODE_RDONLY[] = unsafe_load(cglobal((:MPICONSTANTS_MODE_RDONLY, libmpiconstants), Cint))
    Consts.MPI_MODE_RDWR[] = unsafe_load(cglobal((:MPICONSTANTS_MODE_RDWR, libmpiconstants), Cint))
    Consts.MPI_MODE_SEQUENTIAL[] = unsafe_load(cglobal((:MPICONSTANTS_MODE_SEQUENTIAL, libmpiconstants), Cint))
    Consts.MPI_MODE_UNIQUE_OPEN[] = unsafe_load(cglobal((:MPICONSTANTS_MODE_UNIQUE_OPEN, libmpiconstants), Cint))
    Consts.MPI_MODE_WRONLY[] = unsafe_load(cglobal((:MPICONSTANTS_MODE_WRONLY, libmpiconstants), Cint))
    Consts.MPI_ORDER_C[] = unsafe_load(cglobal((:MPICONSTANTS_ORDER_C, libmpiconstants), Cint))
    Consts.MPI_ORDER_FORTRAN[] = unsafe_load(cglobal((:MPICONSTANTS_ORDER_FORTRAN, libmpiconstants), Cint))
    Consts.MPI_SEEK_CUR[] = unsafe_load(cglobal((:MPICONSTANTS_SEEK_CUR, libmpiconstants), Cint))
    Consts.MPI_SEEK_END[] = unsafe_load(cglobal((:MPICONSTANTS_SEEK_END, libmpiconstants), Cint))
    Consts.MPI_SEEK_SET[] = unsafe_load(cglobal((:MPICONSTANTS_SEEK_SET, libmpiconstants), Cint))
    Consts.MPI_THREAD_SINGLE[] = unsafe_load(cglobal((:MPICONSTANTS_THREAD_SINGLE, libmpiconstants), Cint))
    Consts.MPI_THREAD_FUNNELED[] = unsafe_load(cglobal((:MPICONSTANTS_THREAD_FUNNELED, libmpiconstants), Cint))
    Consts.MPI_THREAD_SERIALIZED[] = unsafe_load(cglobal((:MPICONSTANTS_THREAD_SERIALIZED, libmpiconstants), Cint))
    Consts.MPI_THREAD_MULTIPLE[] = unsafe_load(cglobal((:MPICONSTANTS_THREAD_MULTIPLE, libmpiconstants), Cint))
    Consts.MPI_TYPECLASS_COMPLEX[] = unsafe_load(cglobal((:MPICONSTANTS_TYPECLASS_COMPLEX, libmpiconstants), Cint))
    Consts.MPI_TYPECLASS_INTEGER[] = unsafe_load(cglobal((:MPICONSTANTS_TYPECLASS_INTEGER, libmpiconstants), Cint))
    Consts.MPI_TYPECLASS_REAL[] = unsafe_load(cglobal((:MPICONSTANTS_TYPECLASS_REAL, libmpiconstants), Cint))

    Consts.MPI_ARGV_NULL[] = unsafe_load(cglobal((:MPICONSTANTS_ARGV_NULL, libmpiconstants), Ptr{Ptr{Cchar}}))
    Consts.MPI_ARGVS_NULL[] = unsafe_load(cglobal((:MPICONSTANTS_ARGVS_NULL, libmpiconstants), Ptr{Ptr{Ptr{Cchar}}}))
    # MPI_UNWEIGHTED[] = unsafe_load(cglobal((:MPICONSTANTS_UNWEIGHTED, libmpiconstants), Ptr{Cint}))
    # MPI_WEIGHTS_EMPTY[] = unsafe_load(cglobal((:MPICONSTANTS_WEIGHTS_EMPTY, libmpiconstants), Ptr{Cint}))
    Consts.MPI_BOTTOM[] = unsafe_load(cglobal((:MPICONSTANTS_BOTTOM, libmpiconstants), Ptr{Cvoid}))
    Consts.MPI_IN_PLACE[] = unsafe_load(cglobal((:MPICONSTANTS_IN_PLACE, libmpiconstants), Ptr{Cvoid}))

    Consts.MPI_COMM_NULL[] = unsafe_load(cglobal((:MPICONSTANTS_COMM_NULL , libmpiconstants), MPI_Comm))
    Consts.MPI_COMM_SELF[] = unsafe_load(cglobal((:MPICONSTANTS_COMM_SELF , libmpiconstants), MPI_Comm))
    Consts.MPI_COMM_WORLD[] = unsafe_load(cglobal((:MPICONSTANTS_COMM_WORLD, libmpiconstants), MPI_Comm))

    Consts.MPI_COMM_DUP_FN[] = unsafe_load(cglobal((:MPICONSTANTS_COMM_DUP_FN, libmpiconstants), MPI_Comm_copy_attr_function))

    Consts.MPI_COMM_NULL_COPY_FN[] = unsafe_load(cglobal((:MPICONSTANTS_COMM_NULL_COPY_FN, libmpiconstants), MPI_Comm_copy_attr_function))

    Consts.MPI_COMM_NULL_DELETE_FN[] = unsafe_load(cglobal((:MPICONSTANTS_COMM_NULL_DELETE_FN, libmpiconstants), MPI_Comm_delete_attr_function))

    Consts.MPI_NULL_COPY_FN[] = unsafe_load(cglobal((:MPICONSTANTS_NULL_COPY_FN, libmpiconstants), MPI_Copy_function))

    Consts.MPI_2DOUBLE_PRECISION[] = unsafe_load(cglobal((:MPICONSTANTS_2DOUBLE_PRECISION, libmpiconstants), MPI_Datatype))
    Consts.MPI_2INT[] = unsafe_load(cglobal((:MPICONSTANTS_2INT, libmpiconstants), MPI_Datatype))
    Consts.MPI_2INTEGER[] = unsafe_load(cglobal((:MPICONSTANTS_2INTEGER, libmpiconstants), MPI_Datatype))
    Consts.MPI_2REAL[] = unsafe_load(cglobal((:MPICONSTANTS_2REAL, libmpiconstants), MPI_Datatype))
    Consts.MPI_AINT[] = unsafe_load(cglobal((:MPICONSTANTS_AINT, libmpiconstants), MPI_Datatype))
    Consts.MPI_BYTE[] = unsafe_load(cglobal((:MPICONSTANTS_BYTE, libmpiconstants), MPI_Datatype))
    Consts.MPI_CHAR[] = unsafe_load(cglobal((:MPICONSTANTS_CHAR, libmpiconstants), MPI_Datatype))
    Consts.MPI_CHARACTER[] = unsafe_load(cglobal((:MPICONSTANTS_CHARACTER, libmpiconstants), MPI_Datatype))
    Consts.MPI_COMPLEX[] = unsafe_load(cglobal((:MPICONSTANTS_COMPLEX, libmpiconstants), MPI_Datatype))
    Consts.MPI_COMPLEX16[] = unsafe_load(cglobal((:MPICONSTANTS_COMPLEX16, libmpiconstants), MPI_Datatype))
    # MPI_COMPLEX32[] = unsafe_load(cglobal((:MPICONSTANTS_COMPLEX32, libmpiconstants), MPI_Datatype))
    Consts.MPI_COMPLEX8[] = unsafe_load(cglobal((:MPICONSTANTS_COMPLEX8, libmpiconstants), MPI_Datatype))
    Consts.MPI_COUNT[] = unsafe_load(cglobal((:MPICONSTANTS_COUNT, libmpiconstants), MPI_Datatype))
    Consts.MPI_CXX_BOOL[] = unsafe_load(cglobal((:MPICONSTANTS_CXX_BOOL, libmpiconstants), MPI_Datatype))
    Consts.MPI_CXX_DOUBLE_COMPLEX[] = unsafe_load(cglobal((:MPICONSTANTS_CXX_DOUBLE_COMPLEX, libmpiconstants), MPI_Datatype))
    Consts.MPI_CXX_FLOAT_COMPLEX[] = unsafe_load(cglobal((:MPICONSTANTS_CXX_FLOAT_COMPLEX, libmpiconstants), MPI_Datatype))
    Consts.MPI_CXX_LONG_DOUBLE_COMPLEX[] = unsafe_load(cglobal((:MPICONSTANTS_CXX_LONG_DOUBLE_COMPLEX, libmpiconstants), MPI_Datatype))
    Consts.MPI_C_BOOL[] = unsafe_load(cglobal((:MPICONSTANTS_C_BOOL, libmpiconstants), MPI_Datatype))
    Consts.MPI_C_COMPLEX[] = unsafe_load(cglobal((:MPICONSTANTS_C_COMPLEX, libmpiconstants), MPI_Datatype))
    Consts.MPI_C_DOUBLE_COMPLEX[] = unsafe_load(cglobal((:MPICONSTANTS_C_DOUBLE_COMPLEX, libmpiconstants), MPI_Datatype))
    Consts.MPI_C_FLOAT_COMPLEX[] = unsafe_load(cglobal((:MPICONSTANTS_C_FLOAT_COMPLEX, libmpiconstants), MPI_Datatype))
    Consts.MPI_C_LONG_DOUBLE_COMPLEX[] = unsafe_load(cglobal((:MPICONSTANTS_C_LONG_DOUBLE_COMPLEX, libmpiconstants), MPI_Datatype))
    Consts.MPI_DATATYPE_NULL[] = unsafe_load(cglobal((:MPICONSTANTS_DATATYPE_NULL, libmpiconstants), MPI_Datatype))
    Consts.MPI_DOUBLE[] = unsafe_load(cglobal((:MPICONSTANTS_DOUBLE, libmpiconstants), MPI_Datatype))
    Consts.MPI_DOUBLE_COMPLEX[] = unsafe_load(cglobal((:MPICONSTANTS_DOUBLE_COMPLEX, libmpiconstants), MPI_Datatype))
    Consts.MPI_DOUBLE_INT[] = unsafe_load(cglobal((:MPICONSTANTS_DOUBLE_INT, libmpiconstants), MPI_Datatype))
    Consts.MPI_DOUBLE_PRECISION[] = unsafe_load(cglobal((:MPICONSTANTS_DOUBLE_PRECISION, libmpiconstants), MPI_Datatype))
    Consts.MPI_FLOAT[] = unsafe_load(cglobal((:MPICONSTANTS_FLOAT, libmpiconstants), MPI_Datatype))
    Consts.MPI_FLOAT_INT[] = unsafe_load(cglobal((:MPICONSTANTS_FLOAT_INT, libmpiconstants), MPI_Datatype))
    Consts.MPI_INT[] = unsafe_load(cglobal((:MPICONSTANTS_INT, libmpiconstants), MPI_Datatype))
    Consts.MPI_INT16_T[] = unsafe_load(cglobal((:MPICONSTANTS_INT16_T, libmpiconstants), MPI_Datatype))
    Consts.MPI_INT32_T[] = unsafe_load(cglobal((:MPICONSTANTS_INT32_T, libmpiconstants), MPI_Datatype))
    Consts.MPI_INT64_T[] = unsafe_load(cglobal((:MPICONSTANTS_INT64_T, libmpiconstants), MPI_Datatype))
    Consts.MPI_INT8_T[] = unsafe_load(cglobal((:MPICONSTANTS_INT8_T, libmpiconstants), MPI_Datatype))
    Consts.MPI_INTEGER[] = unsafe_load(cglobal((:MPICONSTANTS_INTEGER, libmpiconstants), MPI_Datatype))
    Consts.MPI_INTEGER1[] = unsafe_load(cglobal((:MPICONSTANTS_INTEGER1, libmpiconstants), MPI_Datatype))
    Consts.MPI_INTEGER2[] = unsafe_load(cglobal((:MPICONSTANTS_INTEGER2, libmpiconstants), MPI_Datatype))
    Consts.MPI_INTEGER4[] = unsafe_load(cglobal((:MPICONSTANTS_INTEGER4, libmpiconstants), MPI_Datatype))
    Consts.MPI_INTEGER8[] = unsafe_load(cglobal((:MPICONSTANTS_INTEGER8, libmpiconstants), MPI_Datatype))
    Consts.MPI_LOGICAL[] = unsafe_load(cglobal((:MPICONSTANTS_LOGICAL, libmpiconstants), MPI_Datatype))
    Consts.MPI_LONG[] = unsafe_load(cglobal((:MPICONSTANTS_LONG, libmpiconstants), MPI_Datatype))
    Consts.MPI_LONG_DOUBLE[] = unsafe_load(cglobal((:MPICONSTANTS_LONG_DOUBLE, libmpiconstants), MPI_Datatype))
    Consts.MPI_LONG_DOUBLE_INT[] = unsafe_load(cglobal((:MPICONSTANTS_LONG_DOUBLE_INT, libmpiconstants), MPI_Datatype))
    Consts.MPI_LONG_INT[] = unsafe_load(cglobal((:MPICONSTANTS_LONG_INT, libmpiconstants), MPI_Datatype))
    Consts.MPI_LONG_LONG[] = unsafe_load(cglobal((:MPICONSTANTS_LONG_LONG, libmpiconstants), MPI_Datatype))
    Consts.MPI_LONG_LONG_INT[] = unsafe_load(cglobal((:MPICONSTANTS_LONG_LONG_INT, libmpiconstants), MPI_Datatype))
    Consts.MPI_OFFSET[] = unsafe_load(cglobal((:MPICONSTANTS_OFFSET, libmpiconstants), MPI_Datatype))
    Consts.MPI_PACKED[] = unsafe_load(cglobal((:MPICONSTANTS_PACKED, libmpiconstants), MPI_Datatype))
    Consts.MPI_REAL[] = unsafe_load(cglobal((:MPICONSTANTS_REAL, libmpiconstants), MPI_Datatype))
    # MPI_REAL16[] = unsafe_load(cglobal((:MPICONSTANTS_REAL16, libmpiconstants), MPI_Datatype))
    Consts.MPI_REAL4[] = unsafe_load(cglobal((:MPICONSTANTS_REAL4, libmpiconstants), MPI_Datatype))
    Consts.MPI_REAL8[] = unsafe_load(cglobal((:MPICONSTANTS_REAL8, libmpiconstants), MPI_Datatype))
    Consts.MPI_SHORT[] = unsafe_load(cglobal((:MPICONSTANTS_SHORT, libmpiconstants), MPI_Datatype))
    Consts.MPI_SHORT_INT[] = unsafe_load(cglobal((:MPICONSTANTS_SHORT_INT, libmpiconstants), MPI_Datatype))
    Consts.MPI_SIGNED_CHAR[] = unsafe_load(cglobal((:MPICONSTANTS_SIGNED_CHAR, libmpiconstants), MPI_Datatype))
    Consts.MPI_UINT16_T[] = unsafe_load(cglobal((:MPICONSTANTS_UINT16_T, libmpiconstants), MPI_Datatype))
    Consts.MPI_UINT32_T[] = unsafe_load(cglobal((:MPICONSTANTS_UINT32_T, libmpiconstants), MPI_Datatype))
    Consts.MPI_UINT64_T[] = unsafe_load(cglobal((:MPICONSTANTS_UINT64_T, libmpiconstants), MPI_Datatype))
    Consts.MPI_UINT8_T[] = unsafe_load(cglobal((:MPICONSTANTS_UINT8_T, libmpiconstants), MPI_Datatype))
    Consts.MPI_UNSIGNED[] = unsafe_load(cglobal((:MPICONSTANTS_UNSIGNED, libmpiconstants), MPI_Datatype))
    Consts.MPI_UNSIGNED_CHAR[] = unsafe_load(cglobal((:MPICONSTANTS_UNSIGNED_CHAR, libmpiconstants), MPI_Datatype))
    Consts.MPI_UNSIGNED_LONG[] = unsafe_load(cglobal((:MPICONSTANTS_UNSIGNED_LONG, libmpiconstants), MPI_Datatype))
    Consts.MPI_UNSIGNED_LONG_LONG[] = unsafe_load(cglobal((:MPICONSTANTS_UNSIGNED_LONG_LONG, libmpiconstants), MPI_Datatype))
    Consts.MPI_UNSIGNED_SHORT[] = unsafe_load(cglobal((:MPICONSTANTS_UNSIGNED_SHORT, libmpiconstants), MPI_Datatype))
    Consts.MPI_WCHAR[] = unsafe_load(cglobal((:MPICONSTANTS_WCHAR, libmpiconstants), MPI_Datatype))

    Consts.MPI_NULL_DELETE_FN[] = unsafe_load(cglobal((:MPICONSTANTS_NULL_DELETE_FN, libmpiconstants), MPI_Delete_function))

    Consts.MPI_ERRHANDLER_NULL[] = unsafe_load(cglobal((:MPICONSTANTS_ERRHANDLER_NULL, libmpiconstants), MPI_Errhandler))
    Consts.MPI_ERRORS_ARE_FATAL[] = unsafe_load(cglobal((:MPICONSTANTS_ERRORS_ARE_FATAL, libmpiconstants), MPI_Errhandler))
    Consts.MPI_ERRORS_RETURN[] = unsafe_load(cglobal((:MPICONSTANTS_ERRORS_RETURN, libmpiconstants), MPI_Errhandler))

    Consts.MPI_FILE_NULL[] = unsafe_load(cglobal((:MPICONSTANTS_FILE_NULL, libmpiconstants), MPI_File))

    Consts.MPI_GROUP_EMPTY[] = unsafe_load(cglobal((:MPICONSTANTS_GROUP_EMPTY, libmpiconstants), MPI_Group))
    Consts.MPI_GROUP_NULL[] = unsafe_load(cglobal((:MPICONSTANTS_GROUP_NULL, libmpiconstants), MPI_Group))

    Consts.MPI_INFO_ENV[] = unsafe_load(cglobal((:MPICONSTANTS_INFO_ENV, libmpiconstants), MPI_Info))
    Consts.MPI_INFO_NULL[] = unsafe_load(cglobal((:MPICONSTANTS_INFO_NULL, libmpiconstants), MPI_Info))

    Consts.MPI_MESSAGE_NO_PROC[] = unsafe_load(cglobal((:MPICONSTANTS_MESSAGE_NO_PROC, libmpiconstants), MPI_Message))
    Consts.MPI_MESSAGE_NULL[] = unsafe_load(cglobal((:MPICONSTANTS_MESSAGE_NULL, libmpiconstants), MPI_Message))

    Consts.MPI_DISPLACEMENT_CURRENT[] = unsafe_load(cglobal((:MPICONSTANTS_DISPLACEMENT_CURRENT, libmpiconstants), MPI_Offset))

    Consts.MPI_BAND[] = unsafe_load(cglobal((:MPICONSTANTS_BAND, libmpiconstants), MPI_Op))
    Consts.MPI_BOR[] = unsafe_load(cglobal((:MPICONSTANTS_BOR, libmpiconstants), MPI_Op))
    Consts.MPI_BXOR[] = unsafe_load(cglobal((:MPICONSTANTS_BXOR, libmpiconstants), MPI_Op))
    Consts.MPI_LAND[] = unsafe_load(cglobal((:MPICONSTANTS_LAND, libmpiconstants), MPI_Op))
    Consts.MPI_LOR[] = unsafe_load(cglobal((:MPICONSTANTS_LOR, libmpiconstants), MPI_Op))
    Consts.MPI_LXOR[] = unsafe_load(cglobal((:MPICONSTANTS_LXOR, libmpiconstants), MPI_Op))
    Consts.MPI_MAX[] = unsafe_load(cglobal((:MPICONSTANTS_MAX, libmpiconstants), MPI_Op))
    Consts.MPI_MAXLOC[] = unsafe_load(cglobal((:MPICONSTANTS_MAXLOC, libmpiconstants), MPI_Op))
    Consts.MPI_MIN[] = unsafe_load(cglobal((:MPICONSTANTS_MIN, libmpiconstants), MPI_Op))
    Consts.MPI_MINLOC[] = unsafe_load(cglobal((:MPICONSTANTS_MINLOC, libmpiconstants), MPI_Op))
    Consts.MPI_NO_OP[] = unsafe_load(cglobal((:MPICONSTANTS_NO_OP, libmpiconstants), MPI_Op))
    Consts.MPI_OP_NULL[] = unsafe_load(cglobal((:MPICONSTANTS_OP_NULL, libmpiconstants), MPI_Op))
    Consts.MPI_PROD[] = unsafe_load(cglobal((:MPICONSTANTS_PROD, libmpiconstants), MPI_Op))
    Consts.MPI_REPLACE[] = unsafe_load(cglobal((:MPICONSTANTS_REPLACE, libmpiconstants), MPI_Op))
    Consts.MPI_SUM[] = unsafe_load(cglobal((:MPICONSTANTS_SUM, libmpiconstants), MPI_Op))

    Consts.MPI_REQUEST_NULL[] = unsafe_load(cglobal((:MPICONSTANTS_REQUEST_NULL, libmpiconstants), MPI_Request))

    Consts.MPI_STATUS_IGNORE[] = unsafe_load(cglobal((:MPICONSTANTS_STATUS_IGNORE, libmpiconstants), Ptr{MPI_Status}))
    Consts.MPI_STATUSES_IGNORE[] = unsafe_load(cglobal((:MPICONSTANTS_STATUSES_IGNORE, libmpiconstants), Ptr{MPI_Status}))

    Consts.MPI_TYPE_DUP_FN[] = unsafe_load(cglobal((:MPICONSTANTS_TYPE_DUP_FN, libmpiconstants), MPI_Type_copy_attr_function))

    Consts.MPI_TYPE_NULL_COPY_FN[] = unsafe_load(cglobal((:MPICONSTANTS_TYPE_NULL_COPY_FN, libmpiconstants), MPI_Type_copy_attr_function))

    Consts.MPI_TYPE_NULL_DELETE_FN[] = unsafe_load(cglobal((:MPICONSTANTS_TYPE_NULL_DELETE_FN, libmpiconstants), MPI_Type_delete_attr_function))

    Consts.MPI_WIN_NULL[] = unsafe_load(cglobal((:MPICONSTANTS_WIN_NULL, libmpiconstants), MPI_Win))

    Consts.MPI_WIN_DUP_FN[] = unsafe_load(cglobal((:MPICONSTANTS_WIN_DUP_FN, libmpiconstants), MPI_Win_copy_attr_function))
    Consts.MPI_WIN_NULL_COPY_FN[] = unsafe_load(cglobal((:MPICONSTANTS_WIN_NULL_COPY_FN, libmpiconstants), MPI_Win_copy_attr_function))

    Consts.MPI_WIN_NULL_DELETE_FN[] = unsafe_load(cglobal((:MPICONSTANTS_WIN_NULL_DELETE_FN, libmpiconstants), MPI_Win_delete_attr_function))

else # if Sys.iswindows()

    # MicrosoftMPI only supports the standard MPI 2.0, so not all
    # constants are available. (Julia generally supports MPI 3.1.)

    Consts.MPI_ANY_SOURCE[] = Cint(-2)
    Consts.MPI_ANY_TAG[] = Cint(-1)
    Consts.MPI_PROC_NULL[] = Cint(-1)
    Consts.MPI_ROOT[] = Cint(-3)
    Consts.MPI_CART[] = Cint(2)
    Consts.MPI_DIST_GRAPH[] = Cint(3)
    Consts.MPI_GRAPH[] = Cint(1)
    Consts.MPI_CONGRUENT[] = Cint(1)
    Consts.MPI_IDENT[] = Cint(0)
    Consts.MPI_SIMILAR[] = Cint(2)
    Consts.MPI_UNEQUAL[] = Cint(3)
    Consts.MPI_KEYVAL_INVALID[] = Cint(0x24000000)
    Consts.MPI_UNDEFINED[] = Cint(-32766)
    Consts.MPI_APPNUM[] = Cint(0x6440000d)
    Consts.MPI_HOST[] = Cint(0x64400003)
    Consts.MPI_IO[] = Cint(0x64400005)
    Consts.MPI_LASTUSEDCODE[] = Cint(0x6440000b)
    Consts.MPI_TAG_UB[] = Cint(0x64400001)
    Consts.MPI_UNIVERSE_SIZE[] = Cint(0x64400009)
    Consts.MPI_WIN_BASE[] = Cint(0x66000001)
    Consts.MPI_WIN_CREATE_FLAVOR[] = Cint(0x66000007)
    Consts.MPI_WIN_DISP_UNIT[] = Cint(0x66000005)
    Consts.MPI_WIN_MODEL[] = Cint(0x66000009)
    Consts.MPI_WIN_SIZE[] = Cint(0x66000003)
    Consts.MPI_WTIME_IS_GLOBAL[] = Cint(0x64400007)
    Consts.MPI_COMBINER_CONTIGUOUS[] = Cint(3)
    Consts.MPI_COMBINER_DARRAY[] = Cint(14)
    Consts.MPI_COMBINER_DUP[] = Cint(2)
    Consts.MPI_COMBINER_F90_COMPLEX[] = Cint(16)
    Consts.MPI_COMBINER_F90_INTEGER[] = Cint(17)
    Consts.MPI_COMBINER_F90_REAL[] = Cint(15)
    Consts.MPI_COMBINER_HINDEXED[] = Cint(9)
    # Consts.MPI_COMBINER_HINDEXED_BLOCK[] = nothing
    Consts.MPI_COMBINER_HVECTOR[] = Cint(6)
    Consts.MPI_COMBINER_INDEXED[] = Cint(7)
    Consts.MPI_COMBINER_INDEXED_BLOCK[] = Cint(10)
    Consts.MPI_COMBINER_NAMED[] = Cint(1)
    Consts.MPI_COMBINER_RESIZED[] = Cint(18)
    Consts.MPI_COMBINER_STRUCT[] = Cint(12)
    Consts.MPI_COMBINER_SUBARRAY[] = Cint(13)
    Consts.MPI_COMBINER_VECTOR[] = Cint(4)
    Consts.MPI_COMM_TYPE_SHARED[] = Cint(1)
    Consts.MPI_DISTRIBUTE_BLOCK[] = Cint(121)
    Consts.MPI_DISTRIBUTE_CYCLIC[] = Cint(122)
    Consts.MPI_DISTRIBUTE_NONE[] = Cint(123)
    Consts.MPI_ERR_ACCESS[] = Cint(20)
    Consts.MPI_ERR_AMODE[] = Cint(21)
    Consts.MPI_ERR_ARG[] = Cint(12)
    Consts.MPI_ERR_ASSERT[] = Cint(53)
    Consts.MPI_ERR_BAD_FILE[] = Cint(22)
    Consts.MPI_ERR_BASE[] = Cint(46)
    Consts.MPI_ERR_BUFFER[] = Cint(1)
    Consts.MPI_ERR_COMM[] = Cint(5)
    Consts.MPI_ERR_CONVERSION[] = Cint(23)
    Consts.MPI_ERR_COUNT[] = Cint(2)
    Consts.MPI_ERR_DIMS[] = Cint(11)
    Consts.MPI_ERR_DISP[] = Cint(52)
    Consts.MPI_ERR_DUP_DATAREP[] = Cint(24)
    Consts.MPI_ERR_FILE[] = Cint(27)
    Consts.MPI_ERR_FILE_EXISTS[] = Cint(25)
    Consts.MPI_ERR_FILE_IN_USE[] = Cint(26)
    Consts.MPI_ERR_GROUP[] = Cint(8)
    Consts.MPI_ERR_INFO[] = Cint(28)
    Consts.MPI_ERR_INFO_KEY[] = Cint(29)
    Consts.MPI_ERR_INFO_NOKEY[] = Cint(31)
    Consts.MPI_ERR_INFO_VALUE[] = Cint(30)
    Consts.MPI_ERR_INTERN[] = Cint(16)
    Consts.MPI_ERR_IN_STATUS[] = Cint(17)
    Consts.MPI_ERR_IO[] = Cint(32)
    Consts.MPI_ERR_KEYVAL[] = Cint(48)
    Consts.MPI_ERR_LASTCODE[] = Cint(0x3fffffff)
    Consts.MPI_ERR_LOCKTYPE[] = Cint(47)
    Consts.MPI_ERR_NAME[] = Cint(33)
    Consts.MPI_ERR_NOT_SAME[] = Cint(35)
    Consts.MPI_ERR_NO_MEM[] = Cint(34)
    Consts.MPI_ERR_NO_SPACE[] = Cint(36)
    Consts.MPI_ERR_NO_SUCH_FILE[] = Cint(37)
    Consts.MPI_ERR_OP[] = Cint(9)
    Consts.MPI_ERR_OTHER[] = Cint(15)
    Consts.MPI_ERR_PENDING[] = Cint(18)
    Consts.MPI_ERR_PORT[] = Cint(38)
    Consts.MPI_ERR_QUOTA[] = Cint(39)
    Consts.MPI_ERR_RANK[] = Cint(6)
    Consts.MPI_ERR_READ_ONLY[] = Cint(40)
    Consts.MPI_ERR_REQUEST[] = Cint(19)
    # Consts.MPI_ERR_RMA_ATTACH[] = nothing
    Consts.MPI_ERR_RMA_CONFLICT[] = Cint(49)
    # Consts.MPI_ERR_RMA_FLAVOR[] = nothing
    # Consts.MPI_ERR_RMA_RANGE[] = nothing
    # Consts.MPI_ERR_RMA_SHARED[] = nothing
    Consts.MPI_ERR_RMA_SYNC[] = Cint(50)
    Consts.MPI_ERR_ROOT[] = Cint(7)
    Consts.MPI_ERR_SERVICE[] = Cint(41)
    Consts.MPI_ERR_SIZE[] = Cint(51)
    # Consts.MPI_ERR_SPAWN[] = nothing
    Consts.MPI_ERR_TAG[] = Cint(4)
    Consts.MPI_ERR_TOPOLOGY[] = Cint(10)
    Consts.MPI_ERR_TRUNCATE[] = Cint(14)
    Consts.MPI_ERR_TYPE[] = Cint(3)
    Consts.MPI_ERR_UNKNOWN[] = Cint(13)
    # Consts.MPI_ERR_UNSUPPORTED_DATAREP[] = nothing
    # Consts.MPI_ERR_UNSUPPORTED_OPERATION[] = nothing
    Consts.MPI_ERR_WIN[] = Cint(45)
    # We special-case MPI_SUCCESS which is required to be 0
    # Consts.MPI_SUCCESS[] = Cint(0)
    @assert Consts.MPI_SUCCESS[] == 0
    Consts.MPI_LOCK_EXCLUSIVE[] = Cint(234)
    Consts.MPI_LOCK_SHARED[] = Cint(235)
    Consts.MPI_MODE_APPEND[] = Cint(0x00000080)
    Consts.MPI_MODE_CREATE[] = Cint(0x00000001)
    Consts.MPI_MODE_DELETE_ON_CLOSE[] = Cint(0x00000010)
    Consts.MPI_MODE_EXCL[] = Cint(0x00000040)
    Consts.MPI_MODE_NOCHECK[] = Cint(1024)
    Consts.MPI_MODE_NOPRECEDE[] = Cint(8192)
    Consts.MPI_MODE_NOPUT[] = Cint(4096)
    Consts.MPI_MODE_NOSTORE[] = Cint(2048)
    Consts.MPI_MODE_NOSUCCEED[] = Cint(16384)
    Consts.MPI_MODE_RDONLY[] = Cint(0x00000002)
    Consts.MPI_MODE_RDWR[] = Cint(0x00000008)
    Consts.MPI_MODE_SEQUENTIAL[] = Cint(0x00000100)
    Consts.MPI_MODE_UNIQUE_OPEN[] = Cint(0x00000020)
    Consts.MPI_MODE_WRONLY[] = Cint(0x00000004)
    Consts.MPI_ORDER_C[] = Cint(56)
    Consts.MPI_ORDER_FORTRAN[] = Cint(57)
    Consts.MPI_SEEK_CUR[] = Cint(602)
    Consts.MPI_SEEK_END[] = Cint(604)
    Consts.MPI_SEEK_SET[] = Cint(600)
    Consts.MPI_THREAD_SINGLE[] = Cint(0)
    Consts.MPI_THREAD_FUNNELED[] = Cint(1)
    Consts.MPI_THREAD_SERIALIZED[] = Cint(2)
    Consts.MPI_THREAD_MULTIPLE[] = Cint(3)
    Consts.MPI_TYPECLASS_COMPLEX[] = Cint(3)
    Consts.MPI_TYPECLASS_INTEGER[] = Cint(2)
    Consts.MPI_TYPECLASS_REAL[] = Cint(1)

    Consts.MPI_ARGV_NULL[] = Ptr{Ptr{Cchar}}(0)
    Consts.MPI_ARGVS_NULL[] = Ptr{Ptr{Ptr{Cchar}}}(0)
    # MPI_UNWEIGHTED[] = nothing
    # MPI_WEIGHTS_EMPTY[] = nothing
    Consts.MPI_BOTTOM[] = Ptr{Cvoid}(0)
    Consts.MPI_IN_PLACE[] = Ptr{Cvoid}(-1)

    Consts.MPI_COMM_NULL[] = MPI_Comm(0x04000000)
    Consts.MPI_COMM_SELF[] = MPI_Comm(0x44000001)
    Consts.MPI_COMM_WORLD[] = MPI_Comm(0x44000000)

    Consts.MPI_COMM_DUP_FN[] = MPI_Comm_copy_attr_function(cglobal((:MPIR_Dup_fn, libmpi)))

    Consts.MPI_COMM_NULL_COPY_FN[] = MPI_Comm_copy_attr_function(0)

    Consts.MPI_COMM_NULL_DELETE_FN[] = MPI_Comm_delete_attr_function(0)

    Consts.MPI_NULL_COPY_FN[] = MPI_Copy_function(0)

    Consts.MPI_2DOUBLE_PRECISION[] = MPI_Datatype(0x4c001023)
    Consts.MPI_2INT[] = MPI_Datatype(0x4c000816)
    Consts.MPI_2INTEGER[] = MPI_Datatype(0x4c000820)
    Consts.MPI_2REAL[] = MPI_Datatype(0x4c000821)
    Consts.MPI_AINT[] = Sys.ARCH ≡ :x86_64 ? MPI_Datatype(0x4c00083b) : MPI_Datatype(0x4c00043b)
    Consts.MPI_BYTE[] = MPI_Datatype(0x4c00010d)
    Consts.MPI_CHAR[] = MPI_Datatype(0x4c000101)
    Consts.MPI_CHARACTER[] = MPI_Datatype(0x4c00011a)
    Consts.MPI_COMPLEX[] = MPI_Datatype(0x4c00081e)
    Consts.MPI_COMPLEX16[] = MPI_Datatype(0x4c00102a)
    # MPI_COMPLEX32[] = nothing
    Consts.MPI_COMPLEX8[] = MPI_Datatype(0x4c000828)
    Consts.MPI_COUNT[] = MPI_Datatype(0x4c000845)
    Consts.MPI_CXX_BOOL[] = MPI_Datatype(0x4c000133)
    Consts.MPI_CXX_DOUBLE_COMPLEX[] = MPI_Datatype(0x4c001035)
    Consts.MPI_CXX_FLOAT_COMPLEX[] = MPI_Datatype(0x4c000834)
    Consts.MPI_CXX_LONG_DOUBLE_COMPLEX[] = MPI_Datatype(0x4c002036)
    Consts.MPI_C_BOOL[] = MPI_Datatype(0x4c000117)
    Consts.MPI_C_COMPLEX[] = MPI_Datatype(0x4c000812)
    Consts.MPI_C_DOUBLE_COMPLEX[] = MPI_Datatype(0x4c001014)
    Consts.MPI_C_FLOAT_COMPLEX[] = MPI_Datatype(0x4c000813)
    Consts.MPI_C_LONG_DOUBLE_COMPLEX[] = MPI_Datatype(0x4c001015)
    Consts.MPI_DATATYPE_NULL[] = MPI_Datatype(0x0c000000)
    Consts.MPI_DOUBLE[] = MPI_Datatype(0x4c00080b)
    Consts.MPI_DOUBLE_COMPLEX[] = MPI_Datatype(0x4c001022)
    Consts.MPI_DOUBLE_INT[] = MPI_Datatype(0x8c000001)
    Consts.MPI_DOUBLE_PRECISION[] = MPI_Datatype(0x4c00081f)
    Consts.MPI_FLOAT[] = MPI_Datatype(0x4c00040a)
    Consts.MPI_FLOAT_INT[] = MPI_Datatype(0x8c000000)
    Consts.MPI_INT[] = MPI_Datatype(0x4c000405)
    Consts.MPI_INT16_T[] = MPI_Datatype(0x4c000234)
    Consts.MPI_INT32_T[] = MPI_Datatype(0x4c000435)
    Consts.MPI_INT64_T[] = MPI_Datatype(0x4c000836)
    Consts.MPI_INT8_T[] = MPI_Datatype(0x4c000133)
    Consts.MPI_INTEGER[] = MPI_Datatype(0x4c00041b)
    Consts.MPI_INTEGER1[] = MPI_Datatype(0x4c00012d)
    Consts.MPI_INTEGER2[] = MPI_Datatype(0x4c00022f)
    Consts.MPI_INTEGER4[] = MPI_Datatype(0x4c000430)
    Consts.MPI_INTEGER8[] = MPI_Datatype(0x4c000831)
    Consts.MPI_LOGICAL[] = MPI_Datatype(0x4c00041d)
    Consts.MPI_LONG[] = MPI_Datatype(0x4c000407)
    Consts.MPI_LONG_DOUBLE[] = MPI_Datatype(0x4c00080c)
    Consts.MPI_LONG_DOUBLE_INT[] = MPI_Datatype(0x8c000004)
    Consts.MPI_LONG_INT[] = MPI_Datatype(0x8c000002)
    Consts.MPI_LONG_LONG[] = MPI_Datatype(0x4c000809)
    Consts.MPI_LONG_LONG_INT[] = MPI_Datatype(0x4c000809)
    Consts.MPI_OFFSET[] = MPI_Datatype(0x4c000844)
    Consts.MPI_PACKED[] = MPI_Datatype(0x4c00010f)
    Consts.MPI_REAL[] = MPI_Datatype(0x4c00041c)
    # MPI_REAL16[] = nothing
    Consts.MPI_REAL4[] = MPI_Datatype(0x4c000427)
    Consts.MPI_REAL8[] = MPI_Datatype(0x4c000829)
    Consts.MPI_SHORT[] = MPI_Datatype(0x4c000203)
    Consts.MPI_SHORT_INT[] = MPI_Datatype(0x8c000003)
    Consts.MPI_SIGNED_CHAR[] = MPI_Datatype(0x4c000118)
    Consts.MPI_UINT16_T[] = MPI_Datatype(0x4c000238)
    Consts.MPI_UINT32_T[] = MPI_Datatype(0x4c000439)
    Consts.MPI_UINT64_T[] = MPI_Datatype(0x4c00083a)
    Consts.MPI_UINT8_T[] = MPI_Datatype(0x4c000137)
    Consts.MPI_UNSIGNED[] = MPI_Datatype(0x4c000406)
    Consts.MPI_UNSIGNED_CHAR[] = MPI_Datatype(0x4c000102)
    Consts.MPI_UNSIGNED_LONG[] = MPI_Datatype(0x4c000408)
    Consts.MPI_UNSIGNED_LONG_LONG[] = MPI_Datatype(0x4c000819)
    Consts.MPI_UNSIGNED_SHORT[] = MPI_Datatype(0x4c000204)
    Consts.MPI_WCHAR[] = MPI_Datatype(0x4c00040e)

    Consts.MPI_NULL_DELETE_FN[] = MPI_Delete_function(0)

    Consts.MPI_ERRHANDLER_NULL[] = MPI_Errhandler(0x14000000)
    Consts.MPI_ERRORS_ARE_FATAL[] = MPI_Errhandler(0x54000000)
    Consts.MPI_ERRORS_RETURN[] = MPI_Errhandler(0x54000001)

    Consts.MPI_FILE_NULL[] = MPI_File(0)

    Consts.MPI_GROUP_EMPTY[] = MPI_Group(0x48000000)
    Consts.MPI_GROUP_NULL[] = MPI_Group(0x08000000)

    # Consts.MPI_INFO_ENV[] = nothing
    Consts.MPI_INFO_NULL[] = MPI_Info(0x1c000000)

    Consts.MPI_MESSAGE_NO_PROC[] = MPI_Message(0x6c000000)
    Consts.MPI_MESSAGE_NULL[] = MPI_Message(0x2c000000)

    Consts.MPI_DISPLACEMENT_CURRENT[] = MPI_Offset(-54278278)

    Consts.MPI_BAND[] = MPI_Op(0x58000006)
    Consts.MPI_BOR[] = MPI_Op(0x58000008)
    Consts.MPI_BXOR[] = MPI_Op(0x5800000a)
    Consts.MPI_LAND[] = MPI_Op(0x58000005)
    Consts.MPI_LOR[] = MPI_Op(0x58000007)
    Consts.MPI_LXOR[] = MPI_Op(0x58000009)
    Consts.MPI_MAX[] = MPI_Op(0x58000001)
    Consts.MPI_MAXLOC[] = MPI_Op(0x5800000c)
    Consts.MPI_MIN[] = MPI_Op(0x58000002)
    Consts.MPI_MINLOC[] = MPI_Op(0x5800000b)
    Consts.MPI_NO_OP[] = MPI_Op(0x5800000e)
    Consts.MPI_OP_NULL[] = MPI_Op(0x18000000)
    Consts.MPI_PROD[] = MPI_Op(0x58000004)
    Consts.MPI_REPLACE[] = MPI_Op(0x5800000d)
    Consts.MPI_SUM[] = MPI_Op(0x58000003)

    Consts.MPI_REQUEST_NULL[] = MPI_Request(0x2c000000)

    Consts.MPI_STATUS_IGNORE[] = Ptr{MPI_Status}(1)
    Consts.MPI_STATUSES_IGNORE[] = Ptr{MPI_Status}(1)

    Consts.MPI_TYPE_DUP_FN[] = MPI_Type_copy_attr_function(cglobal((:MPIR_Dup_fn, libmpi)))

    Consts.MPI_TYPE_NULL_COPY_FN[] = MPI_Type_copy_attr_function(0)

    Consts.MPI_TYPE_NULL_DELETE_FN[] = MPI_Type_delete_attr_function(0)

    Consts.MPI_WIN_NULL[] = MPI_Win(0x20000000)

    Consts.MPI_WIN_DUP_FN[] = MPI_Win_copy_attr_function(cglobal((:MPIR_Dup_fn, libmpi)))
    Consts.MPI_WIN_NULL_COPY_FN[] = MPI_Win_copy_attr_function(0)

    Consts.MPI_WIN_NULL_DELETE_FN[] = MPI_Win_delete_attr_function(0)

end # if Sys.iswindows()

run_load_time_hooks()

end
