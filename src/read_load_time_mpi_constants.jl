# This reads in the load-time MPI constants. They were declared
# earlier with dummy values in the file
# `define_load_time_mpi_constants.jl`.

function read_load_time_mpi_constants()

if !Sys.iswindows()

global MPI_ANY_SOURCE = unsafe_load(cglobal((:MPICONSTANTS_ANY_SOURCE, libmpiconstants), Cint))
global MPI_ANY_TAG = unsafe_load(cglobal((:MPICONSTANTS_ANY_TAG, libmpiconstants), Cint))
global MPI_PROC_NULL = unsafe_load(cglobal((:MPICONSTANTS_PROC_NULL, libmpiconstants), Cint))
global MPI_ROOT = unsafe_load(cglobal((:MPICONSTANTS_ROOT, libmpiconstants), Cint))
global MPI_CART = unsafe_load(cglobal((:MPICONSTANTS_CART, libmpiconstants), Cint))
global MPI_DIST_GRAPH = unsafe_load(cglobal((:MPICONSTANTS_DIST_GRAPH, libmpiconstants), Cint))
global MPI_GRAPH = unsafe_load(cglobal((:MPICONSTANTS_GRAPH, libmpiconstants), Cint))
global MPI_CONGRUENT = unsafe_load(cglobal((:MPICONSTANTS_CONGRUENT, libmpiconstants), Cint))
global MPI_IDENT = unsafe_load(cglobal((:MPICONSTANTS_IDENT, libmpiconstants), Cint))
global MPI_SIMILAR = unsafe_load(cglobal((:MPICONSTANTS_SIMILAR, libmpiconstants), Cint))
global MPI_UNEQUAL = unsafe_load(cglobal((:MPICONSTANTS_UNEQUAL, libmpiconstants), Cint))
global MPI_KEYVAL_INVALID = unsafe_load(cglobal((:MPICONSTANTS_KEYVAL_INVALID, libmpiconstants), Cint))
global MPI_UNDEFINED = unsafe_load(cglobal((:MPICONSTANTS_UNDEFINED, libmpiconstants), Cint))
global MPI_APPNUM = unsafe_load(cglobal((:MPICONSTANTS_APPNUM, libmpiconstants), Cint))
global MPI_HOST = unsafe_load(cglobal((:MPICONSTANTS_HOST, libmpiconstants), Cint))
global MPI_IO = unsafe_load(cglobal((:MPICONSTANTS_IO, libmpiconstants), Cint))
global MPI_LASTUSEDCODE = unsafe_load(cglobal((:MPICONSTANTS_LASTUSEDCODE, libmpiconstants), Cint))
global MPI_TAG_UB = unsafe_load(cglobal((:MPICONSTANTS_TAG_UB, libmpiconstants), Cint))
global MPI_UNIVERSE_SIZE = unsafe_load(cglobal((:MPICONSTANTS_UNIVERSE_SIZE, libmpiconstants), Cint))
global MPI_WIN_BASE = unsafe_load(cglobal((:MPICONSTANTS_WIN_BASE, libmpiconstants), Cint))
global MPI_WIN_CREATE_FLAVOR = unsafe_load(cglobal((:MPICONSTANTS_WIN_CREATE_FLAVOR, libmpiconstants), Cint))
global MPI_WIN_DISP_UNIT = unsafe_load(cglobal((:MPICONSTANTS_WIN_DISP_UNIT, libmpiconstants), Cint))
global MPI_WIN_MODEL = unsafe_load(cglobal((:MPICONSTANTS_WIN_MODEL, libmpiconstants), Cint))
global MPI_WIN_SIZE = unsafe_load(cglobal((:MPICONSTANTS_WIN_SIZE, libmpiconstants), Cint))
global MPI_WTIME_IS_GLOBAL = unsafe_load(cglobal((:MPICONSTANTS_WTIME_IS_GLOBAL, libmpiconstants), Cint))
global MPI_COMBINER_CONTIGUOUS = unsafe_load(cglobal((:MPICONSTANTS_COMBINER_CONTIGUOUS, libmpiconstants), Cint))
global MPI_COMBINER_DARRAY = unsafe_load(cglobal((:MPICONSTANTS_COMBINER_DARRAY, libmpiconstants), Cint))
global MPI_COMBINER_DUP = unsafe_load(cglobal((:MPICONSTANTS_COMBINER_DUP, libmpiconstants), Cint))
global MPI_COMBINER_F90_COMPLEX = unsafe_load(cglobal((:MPICONSTANTS_COMBINER_F90_COMPLEX, libmpiconstants), Cint))
global MPI_COMBINER_F90_INTEGER = unsafe_load(cglobal((:MPICONSTANTS_COMBINER_F90_INTEGER, libmpiconstants), Cint))
global MPI_COMBINER_F90_REAL = unsafe_load(cglobal((:MPICONSTANTS_COMBINER_F90_REAL, libmpiconstants), Cint))
global MPI_COMBINER_HINDEXED = unsafe_load(cglobal((:MPICONSTANTS_COMBINER_HINDEXED, libmpiconstants), Cint))
global MPI_COMBINER_HINDEXED_BLOCK = unsafe_load(cglobal((:MPICONSTANTS_COMBINER_HINDEXED_BLOCK, libmpiconstants), Cint))
global MPI_COMBINER_HVECTOR = unsafe_load(cglobal((:MPICONSTANTS_COMBINER_HVECTOR, libmpiconstants), Cint))
global MPI_COMBINER_INDEXED = unsafe_load(cglobal((:MPICONSTANTS_COMBINER_INDEXED, libmpiconstants), Cint))
global MPI_COMBINER_INDEXED_BLOCK = unsafe_load(cglobal((:MPICONSTANTS_COMBINER_INDEXED_BLOCK, libmpiconstants), Cint))
global MPI_COMBINER_NAMED = unsafe_load(cglobal((:MPICONSTANTS_COMBINER_NAMED, libmpiconstants), Cint))
global MPI_COMBINER_RESIZED = unsafe_load(cglobal((:MPICONSTANTS_COMBINER_RESIZED, libmpiconstants), Cint))
global MPI_COMBINER_STRUCT = unsafe_load(cglobal((:MPICONSTANTS_COMBINER_STRUCT, libmpiconstants), Cint))
global MPI_COMBINER_SUBARRAY = unsafe_load(cglobal((:MPICONSTANTS_COMBINER_SUBARRAY, libmpiconstants), Cint))
global MPI_COMBINER_VECTOR = unsafe_load(cglobal((:MPICONSTANTS_COMBINER_VECTOR, libmpiconstants), Cint))
global MPI_COMM_TYPE_SHARED = unsafe_load(cglobal((:MPICONSTANTS_COMM_TYPE_SHARED, libmpiconstants), Cint))
global MPI_DISTRIBUTE_BLOCK = unsafe_load(cglobal((:MPICONSTANTS_DISTRIBUTE_BLOCK, libmpiconstants), Cint))
global MPI_DISTRIBUTE_CYCLIC = unsafe_load(cglobal((:MPICONSTANTS_DISTRIBUTE_CYCLIC, libmpiconstants), Cint))
global MPI_DISTRIBUTE_NONE = unsafe_load(cglobal((:MPICONSTANTS_DISTRIBUTE_NONE, libmpiconstants), Cint))
global MPI_ERR_ACCESS = unsafe_load(cglobal((:MPICONSTANTS_ERR_ACCESS, libmpiconstants), Cint))
global MPI_ERR_AMODE = unsafe_load(cglobal((:MPICONSTANTS_ERR_AMODE, libmpiconstants), Cint))
global MPI_ERR_ARG = unsafe_load(cglobal((:MPICONSTANTS_ERR_ARG, libmpiconstants), Cint))
global MPI_ERR_ASSERT = unsafe_load(cglobal((:MPICONSTANTS_ERR_ASSERT, libmpiconstants), Cint))
global MPI_ERR_BAD_FILE = unsafe_load(cglobal((:MPICONSTANTS_ERR_BAD_FILE, libmpiconstants), Cint))
global MPI_ERR_BASE = unsafe_load(cglobal((:MPICONSTANTS_ERR_BASE, libmpiconstants), Cint))
global MPI_ERR_BUFFER = unsafe_load(cglobal((:MPICONSTANTS_ERR_BUFFER, libmpiconstants), Cint))
global MPI_ERR_COMM = unsafe_load(cglobal((:MPICONSTANTS_ERR_COMM, libmpiconstants), Cint))
global MPI_ERR_CONVERSION = unsafe_load(cglobal((:MPICONSTANTS_ERR_CONVERSION, libmpiconstants), Cint))
global MPI_ERR_COUNT = unsafe_load(cglobal((:MPICONSTANTS_ERR_COUNT, libmpiconstants), Cint))
global MPI_ERR_DIMS = unsafe_load(cglobal((:MPICONSTANTS_ERR_DIMS, libmpiconstants), Cint))
global MPI_ERR_DISP = unsafe_load(cglobal((:MPICONSTANTS_ERR_DISP, libmpiconstants), Cint))
global MPI_ERR_DUP_DATAREP = unsafe_load(cglobal((:MPICONSTANTS_ERR_DUP_DATAREP, libmpiconstants), Cint))
global MPI_ERR_FILE = unsafe_load(cglobal((:MPICONSTANTS_ERR_FILE, libmpiconstants), Cint))
global MPI_ERR_FILE_EXISTS = unsafe_load(cglobal((:MPICONSTANTS_ERR_FILE_EXISTS, libmpiconstants), Cint))
global MPI_ERR_FILE_IN_USE = unsafe_load(cglobal((:MPICONSTANTS_ERR_FILE_IN_USE, libmpiconstants), Cint))
global MPI_ERR_GROUP = unsafe_load(cglobal((:MPICONSTANTS_ERR_GROUP, libmpiconstants), Cint))
global MPI_ERR_INFO = unsafe_load(cglobal((:MPICONSTANTS_ERR_INFO, libmpiconstants), Cint))
global MPI_ERR_INFO_KEY = unsafe_load(cglobal((:MPICONSTANTS_ERR_INFO_KEY, libmpiconstants), Cint))
global MPI_ERR_INFO_NOKEY = unsafe_load(cglobal((:MPICONSTANTS_ERR_INFO_NOKEY, libmpiconstants), Cint))
global MPI_ERR_INFO_VALUE = unsafe_load(cglobal((:MPICONSTANTS_ERR_INFO_VALUE, libmpiconstants), Cint))
global MPI_ERR_INTERN = unsafe_load(cglobal((:MPICONSTANTS_ERR_INTERN, libmpiconstants), Cint))
global MPI_ERR_IN_STATUS = unsafe_load(cglobal((:MPICONSTANTS_ERR_IN_STATUS, libmpiconstants), Cint))
global MPI_ERR_IO = unsafe_load(cglobal((:MPICONSTANTS_ERR_IO, libmpiconstants), Cint))
global MPI_ERR_KEYVAL = unsafe_load(cglobal((:MPICONSTANTS_ERR_KEYVAL, libmpiconstants), Cint))
global MPI_ERR_LASTCODE = unsafe_load(cglobal((:MPICONSTANTS_ERR_LASTCODE, libmpiconstants), Cint))
global MPI_ERR_LOCKTYPE = unsafe_load(cglobal((:MPICONSTANTS_ERR_LOCKTYPE, libmpiconstants), Cint))
global MPI_ERR_NAME = unsafe_load(cglobal((:MPICONSTANTS_ERR_NAME, libmpiconstants), Cint))
global MPI_ERR_NOT_SAME = unsafe_load(cglobal((:MPICONSTANTS_ERR_NOT_SAME, libmpiconstants), Cint))
global MPI_ERR_NO_MEM = unsafe_load(cglobal((:MPICONSTANTS_ERR_NO_MEM, libmpiconstants), Cint))
global MPI_ERR_NO_SPACE = unsafe_load(cglobal((:MPICONSTANTS_ERR_NO_SPACE, libmpiconstants), Cint))
global MPI_ERR_NO_SUCH_FILE = unsafe_load(cglobal((:MPICONSTANTS_ERR_NO_SUCH_FILE, libmpiconstants), Cint))
global MPI_ERR_OP = unsafe_load(cglobal((:MPICONSTANTS_ERR_OP, libmpiconstants), Cint))
global MPI_ERR_OTHER = unsafe_load(cglobal((:MPICONSTANTS_ERR_OTHER, libmpiconstants), Cint))
global MPI_ERR_PENDING = unsafe_load(cglobal((:MPICONSTANTS_ERR_PENDING, libmpiconstants), Cint))
global MPI_ERR_PORT = unsafe_load(cglobal((:MPICONSTANTS_ERR_PORT, libmpiconstants), Cint))
global MPI_ERR_QUOTA = unsafe_load(cglobal((:MPICONSTANTS_ERR_QUOTA, libmpiconstants), Cint))
global MPI_ERR_RANK = unsafe_load(cglobal((:MPICONSTANTS_ERR_RANK, libmpiconstants), Cint))
global MPI_ERR_READ_ONLY = unsafe_load(cglobal((:MPICONSTANTS_ERR_READ_ONLY, libmpiconstants), Cint))
global MPI_ERR_REQUEST = unsafe_load(cglobal((:MPICONSTANTS_ERR_REQUEST, libmpiconstants), Cint))
global MPI_ERR_RMA_ATTACH = unsafe_load(cglobal((:MPICONSTANTS_ERR_RMA_ATTACH, libmpiconstants), Cint))
global MPI_ERR_RMA_CONFLICT = unsafe_load(cglobal((:MPICONSTANTS_ERR_RMA_CONFLICT, libmpiconstants), Cint))
global MPI_ERR_RMA_FLAVOR = unsafe_load(cglobal((:MPICONSTANTS_ERR_RMA_FLAVOR, libmpiconstants), Cint))
global MPI_ERR_RMA_RANGE = unsafe_load(cglobal((:MPICONSTANTS_ERR_RMA_RANGE, libmpiconstants), Cint))
global MPI_ERR_RMA_SHARED = unsafe_load(cglobal((:MPICONSTANTS_ERR_RMA_SHARED, libmpiconstants), Cint))
global MPI_ERR_RMA_SYNC = unsafe_load(cglobal((:MPICONSTANTS_ERR_RMA_SYNC, libmpiconstants), Cint))
global MPI_ERR_ROOT = unsafe_load(cglobal((:MPICONSTANTS_ERR_ROOT, libmpiconstants), Cint))
global MPI_ERR_SERVICE = unsafe_load(cglobal((:MPICONSTANTS_ERR_SERVICE, libmpiconstants), Cint))
global MPI_ERR_SIZE = unsafe_load(cglobal((:MPICONSTANTS_ERR_SIZE, libmpiconstants), Cint))
global MPI_ERR_SPAWN = unsafe_load(cglobal((:MPICONSTANTS_ERR_SPAWN, libmpiconstants), Cint))
global MPI_ERR_TAG = unsafe_load(cglobal((:MPICONSTANTS_ERR_TAG, libmpiconstants), Cint))
global MPI_ERR_TOPOLOGY = unsafe_load(cglobal((:MPICONSTANTS_ERR_TOPOLOGY, libmpiconstants), Cint))
global MPI_ERR_TRUNCATE = unsafe_load(cglobal((:MPICONSTANTS_ERR_TRUNCATE, libmpiconstants), Cint))
global MPI_ERR_TYPE = unsafe_load(cglobal((:MPICONSTANTS_ERR_TYPE, libmpiconstants), Cint))
global MPI_ERR_UNKNOWN = unsafe_load(cglobal((:MPICONSTANTS_ERR_UNKNOWN, libmpiconstants), Cint))
global MPI_ERR_UNSUPPORTED_DATAREP = unsafe_load(cglobal((:MPICONSTANTS_ERR_UNSUPPORTED_DATAREP, libmpiconstants), Cint))
global MPI_ERR_UNSUPPORTED_OPERATION = unsafe_load(cglobal((:MPICONSTANTS_ERR_UNSUPPORTED_OPERATION, libmpiconstants), Cint))
global MPI_ERR_WIN = unsafe_load(cglobal((:MPICONSTANTS_ERR_WIN, libmpiconstants), Cint))
# We special-case MPI_SUCCESS which is required to be 0
# global MPI_SUCCESS = unsafe_load(cglobal((:MPICONSTANTS_SUCCESS, libmpiconstants), Cint))
@assert unsafe_load(cglobal((:MPICONSTANTS_SUCCESS, libmpiconstants), Cint)) == MPI_SUCCESS
global MPI_LOCK_EXCLUSIVE = unsafe_load(cglobal((:MPICONSTANTS_LOCK_EXCLUSIVE, libmpiconstants), Cint))
global MPI_LOCK_SHARED = unsafe_load(cglobal((:MPICONSTANTS_LOCK_SHARED, libmpiconstants), Cint))
global MPI_MODE_APPEND = unsafe_load(cglobal((:MPICONSTANTS_MODE_APPEND, libmpiconstants), Cint))
global MPI_MODE_CREATE = unsafe_load(cglobal((:MPICONSTANTS_MODE_CREATE, libmpiconstants), Cint))
global MPI_MODE_DELETE_ON_CLOSE = unsafe_load(cglobal((:MPICONSTANTS_MODE_DELETE_ON_CLOSE, libmpiconstants), Cint))
global MPI_MODE_EXCL = unsafe_load(cglobal((:MPICONSTANTS_MODE_EXCL, libmpiconstants), Cint))
global MPI_MODE_NOCHECK = unsafe_load(cglobal((:MPICONSTANTS_MODE_NOCHECK, libmpiconstants), Cint))
global MPI_MODE_NOPRECEDE = unsafe_load(cglobal((:MPICONSTANTS_MODE_NOPRECEDE, libmpiconstants), Cint))
global MPI_MODE_NOPUT = unsafe_load(cglobal((:MPICONSTANTS_MODE_NOPUT, libmpiconstants), Cint))
global MPI_MODE_NOSTORE = unsafe_load(cglobal((:MPICONSTANTS_MODE_NOSTORE, libmpiconstants), Cint))
global MPI_MODE_NOSUCCEED = unsafe_load(cglobal((:MPICONSTANTS_MODE_NOSUCCEED, libmpiconstants), Cint))
global MPI_MODE_RDONLY = unsafe_load(cglobal((:MPICONSTANTS_MODE_RDONLY, libmpiconstants), Cint))
global MPI_MODE_RDWR = unsafe_load(cglobal((:MPICONSTANTS_MODE_RDWR, libmpiconstants), Cint))
global MPI_MODE_SEQUENTIAL = unsafe_load(cglobal((:MPICONSTANTS_MODE_SEQUENTIAL, libmpiconstants), Cint))
global MPI_MODE_UNIQUE_OPEN = unsafe_load(cglobal((:MPICONSTANTS_MODE_UNIQUE_OPEN, libmpiconstants), Cint))
global MPI_MODE_WRONLY = unsafe_load(cglobal((:MPICONSTANTS_MODE_WRONLY, libmpiconstants), Cint))
global MPI_ORDER_C = unsafe_load(cglobal((:MPICONSTANTS_ORDER_C, libmpiconstants), Cint))
global MPI_ORDER_FORTRAN = unsafe_load(cglobal((:MPICONSTANTS_ORDER_FORTRAN, libmpiconstants), Cint))
global MPI_SEEK_CUR = unsafe_load(cglobal((:MPICONSTANTS_SEEK_CUR, libmpiconstants), Cint))
global MPI_SEEK_END = unsafe_load(cglobal((:MPICONSTANTS_SEEK_END, libmpiconstants), Cint))
global MPI_SEEK_SET = unsafe_load(cglobal((:MPICONSTANTS_SEEK_SET, libmpiconstants), Cint))
global MPI_THREAD_SINGLE = unsafe_load(cglobal((:MPICONSTANTS_THREAD_SINGLE, libmpiconstants), Cint))
global MPI_THREAD_FUNNELED = unsafe_load(cglobal((:MPICONSTANTS_THREAD_FUNNELED, libmpiconstants), Cint))
global MPI_THREAD_SERIALIZED = unsafe_load(cglobal((:MPICONSTANTS_THREAD_SERIALIZED, libmpiconstants), Cint))
global MPI_THREAD_MULTIPLE = unsafe_load(cglobal((:MPICONSTANTS_THREAD_MULTIPLE, libmpiconstants), Cint))
global MPI_TYPECLASS_COMPLEX = unsafe_load(cglobal((:MPICONSTANTS_TYPECLASS_COMPLEX, libmpiconstants), Cint))
global MPI_TYPECLASS_INTEGER = unsafe_load(cglobal((:MPICONSTANTS_TYPECLASS_INTEGER, libmpiconstants), Cint))
global MPI_TYPECLASS_REAL = unsafe_load(cglobal((:MPICONSTANTS_TYPECLASS_REAL, libmpiconstants), Cint))

global MPI_ARGV_NULL = unsafe_load(cglobal((:MPICONSTANTS_ARGV_NULL, libmpiconstants), Ptr{Ptr{Cchar}}))
global MPI_ARGVS_NULL = unsafe_load(cglobal((:MPICONSTANTS_ARGVS_NULL, libmpiconstants), Ptr{Ptr{Ptr{Cchar}}}))
# global MPI_UNWEIGHTED = unsafe_load(cglobal((:MPICONSTANTS_UNWEIGHTED, libmpiconstants), Ptr{Cint}))
# global MPI_WEIGHTS_EMPTY = unsafe_load(cglobal((:MPICONSTANTS_WEIGHTS_EMPTY, libmpiconstants), Ptr{Cint}))
global MPI_BOTTOM = unsafe_load(cglobal((:MPICONSTANTS_BOTTOM, libmpiconstants), Ptr{Cvoid}))
global MPI_IN_PLACE = unsafe_load(cglobal((:MPICONSTANTS_IN_PLACE, libmpiconstants), Ptr{Cvoid}))

global MPI_COMM_NULL = unsafe_load(cglobal((:MPICONSTANTS_COMM_NULL , libmpiconstants), MPI_Comm))
global MPI_COMM_SELF = unsafe_load(cglobal((:MPICONSTANTS_COMM_SELF , libmpiconstants), MPI_Comm))
global MPI_COMM_WORLD = unsafe_load(cglobal((:MPICONSTANTS_COMM_WORLD, libmpiconstants), MPI_Comm))

global MPI_COMM_DUP_FN = unsafe_load(cglobal((:MPICONSTANTS_COMM_DUP_FN, libmpiconstants), MPI_Comm_copy_attr_function))

global MPI_COMM_NULL_COPY_FN = unsafe_load(cglobal((:MPICONSTANTS_COMM_NULL_COPY_FN, libmpiconstants), MPI_Comm_copy_attr_function))

global MPI_COMM_NULL_DELETE_FN = unsafe_load(cglobal((:MPICONSTANTS_COMM_NULL_DELETE_FN, libmpiconstants), MPI_Comm_delete_attr_function))

global MPI_NULL_COPY_FN = unsafe_load(cglobal((:MPICONSTANTS_NULL_COPY_FN, libmpiconstants), MPI_Copy_function))

global MPI_2DOUBLE_PRECISION = unsafe_load(cglobal((:MPICONSTANTS_2DOUBLE_PRECISION, libmpiconstants), MPI_Datatype))
global MPI_2INT = unsafe_load(cglobal((:MPICONSTANTS_2INT, libmpiconstants), MPI_Datatype))
global MPI_2INTEGER = unsafe_load(cglobal((:MPICONSTANTS_2INTEGER, libmpiconstants), MPI_Datatype))
global MPI_2REAL = unsafe_load(cglobal((:MPICONSTANTS_2REAL, libmpiconstants), MPI_Datatype))
global MPI_AINT = unsafe_load(cglobal((:MPICONSTANTS_AINT, libmpiconstants), MPI_Datatype))
global MPI_BYTE = unsafe_load(cglobal((:MPICONSTANTS_BYTE, libmpiconstants), MPI_Datatype))
global MPI_CHAR = unsafe_load(cglobal((:MPICONSTANTS_CHAR, libmpiconstants), MPI_Datatype))
global MPI_CHARACTER = unsafe_load(cglobal((:MPICONSTANTS_CHARACTER, libmpiconstants), MPI_Datatype))
global MPI_COMPLEX = unsafe_load(cglobal((:MPICONSTANTS_COMPLEX, libmpiconstants), MPI_Datatype))
global MPI_COMPLEX16 = unsafe_load(cglobal((:MPICONSTANTS_COMPLEX16, libmpiconstants), MPI_Datatype))
# global MPI_COMPLEX32 = unsafe_load(cglobal((:MPICONSTANTS_COMPLEX32, libmpiconstants), MPI_Datatype))
global MPI_COMPLEX8 = unsafe_load(cglobal((:MPICONSTANTS_COMPLEX8, libmpiconstants), MPI_Datatype))
global MPI_COUNT = unsafe_load(cglobal((:MPICONSTANTS_COUNT, libmpiconstants), MPI_Datatype))
global MPI_CXX_BOOL = unsafe_load(cglobal((:MPICONSTANTS_CXX_BOOL, libmpiconstants), MPI_Datatype))
global MPI_CXX_DOUBLE_COMPLEX = unsafe_load(cglobal((:MPICONSTANTS_CXX_DOUBLE_COMPLEX, libmpiconstants), MPI_Datatype))
global MPI_CXX_FLOAT_COMPLEX = unsafe_load(cglobal((:MPICONSTANTS_CXX_FLOAT_COMPLEX, libmpiconstants), MPI_Datatype))
global MPI_CXX_LONG_DOUBLE_COMPLEX = unsafe_load(cglobal((:MPICONSTANTS_CXX_LONG_DOUBLE_COMPLEX, libmpiconstants), MPI_Datatype))
global MPI_C_BOOL = unsafe_load(cglobal((:MPICONSTANTS_C_BOOL, libmpiconstants), MPI_Datatype))
global MPI_C_COMPLEX = unsafe_load(cglobal((:MPICONSTANTS_C_COMPLEX, libmpiconstants), MPI_Datatype))
global MPI_C_DOUBLE_COMPLEX = unsafe_load(cglobal((:MPICONSTANTS_C_DOUBLE_COMPLEX, libmpiconstants), MPI_Datatype))
global MPI_C_FLOAT_COMPLEX = unsafe_load(cglobal((:MPICONSTANTS_C_FLOAT_COMPLEX, libmpiconstants), MPI_Datatype))
global MPI_C_LONG_DOUBLE_COMPLEX = unsafe_load(cglobal((:MPICONSTANTS_C_LONG_DOUBLE_COMPLEX, libmpiconstants), MPI_Datatype))
global MPI_DATATYPE_NULL = unsafe_load(cglobal((:MPICONSTANTS_DATATYPE_NULL, libmpiconstants), MPI_Datatype))
global MPI_DOUBLE = unsafe_load(cglobal((:MPICONSTANTS_DOUBLE, libmpiconstants), MPI_Datatype))
global MPI_DOUBLE_COMPLEX = unsafe_load(cglobal((:MPICONSTANTS_DOUBLE_COMPLEX, libmpiconstants), MPI_Datatype))
global MPI_DOUBLE_INT = unsafe_load(cglobal((:MPICONSTANTS_DOUBLE_INT, libmpiconstants), MPI_Datatype))
global MPI_DOUBLE_PRECISION = unsafe_load(cglobal((:MPICONSTANTS_DOUBLE_PRECISION, libmpiconstants), MPI_Datatype))
global MPI_FLOAT = unsafe_load(cglobal((:MPICONSTANTS_FLOAT, libmpiconstants), MPI_Datatype))
global MPI_FLOAT_INT = unsafe_load(cglobal((:MPICONSTANTS_FLOAT_INT, libmpiconstants), MPI_Datatype))
global MPI_INT = unsafe_load(cglobal((:MPICONSTANTS_INT, libmpiconstants), MPI_Datatype))
global MPI_INT16_T = unsafe_load(cglobal((:MPICONSTANTS_INT16_T, libmpiconstants), MPI_Datatype))
global MPI_INT32_T = unsafe_load(cglobal((:MPICONSTANTS_INT32_T, libmpiconstants), MPI_Datatype))
global MPI_INT64_T = unsafe_load(cglobal((:MPICONSTANTS_INT64_T, libmpiconstants), MPI_Datatype))
global MPI_INT8_T = unsafe_load(cglobal((:MPICONSTANTS_INT8_T, libmpiconstants), MPI_Datatype))
global MPI_INTEGER = unsafe_load(cglobal((:MPICONSTANTS_INTEGER, libmpiconstants), MPI_Datatype))
global MPI_INTEGER1 = unsafe_load(cglobal((:MPICONSTANTS_INTEGER1, libmpiconstants), MPI_Datatype))
global MPI_INTEGER2 = unsafe_load(cglobal((:MPICONSTANTS_INTEGER2, libmpiconstants), MPI_Datatype))
global MPI_INTEGER4 = unsafe_load(cglobal((:MPICONSTANTS_INTEGER4, libmpiconstants), MPI_Datatype))
global MPI_INTEGER8 = unsafe_load(cglobal((:MPICONSTANTS_INTEGER8, libmpiconstants), MPI_Datatype))
global MPI_LOGICAL = unsafe_load(cglobal((:MPICONSTANTS_LOGICAL, libmpiconstants), MPI_Datatype))
global MPI_LONG = unsafe_load(cglobal((:MPICONSTANTS_LONG, libmpiconstants), MPI_Datatype))
global MPI_LONG_DOUBLE = unsafe_load(cglobal((:MPICONSTANTS_LONG_DOUBLE, libmpiconstants), MPI_Datatype))
global MPI_LONG_DOUBLE_INT = unsafe_load(cglobal((:MPICONSTANTS_LONG_DOUBLE_INT, libmpiconstants), MPI_Datatype))
global MPI_LONG_INT = unsafe_load(cglobal((:MPICONSTANTS_LONG_INT, libmpiconstants), MPI_Datatype))
global MPI_LONG_LONG = unsafe_load(cglobal((:MPICONSTANTS_LONG_LONG, libmpiconstants), MPI_Datatype))
global MPI_LONG_LONG_INT = unsafe_load(cglobal((:MPICONSTANTS_LONG_LONG_INT, libmpiconstants), MPI_Datatype))
global MPI_OFFSET = unsafe_load(cglobal((:MPICONSTANTS_OFFSET, libmpiconstants), MPI_Datatype))
global MPI_PACKED = unsafe_load(cglobal((:MPICONSTANTS_PACKED, libmpiconstants), MPI_Datatype))
global MPI_REAL = unsafe_load(cglobal((:MPICONSTANTS_REAL, libmpiconstants), MPI_Datatype))
# global MPI_REAL16 = unsafe_load(cglobal((:MPICONSTANTS_REAL16, libmpiconstants), MPI_Datatype))
global MPI_REAL4 = unsafe_load(cglobal((:MPICONSTANTS_REAL4, libmpiconstants), MPI_Datatype))
global MPI_REAL8 = unsafe_load(cglobal((:MPICONSTANTS_REAL8, libmpiconstants), MPI_Datatype))
global MPI_SHORT = unsafe_load(cglobal((:MPICONSTANTS_SHORT, libmpiconstants), MPI_Datatype))
global MPI_SHORT_INT = unsafe_load(cglobal((:MPICONSTANTS_SHORT_INT, libmpiconstants), MPI_Datatype))
global MPI_SIGNED_CHAR = unsafe_load(cglobal((:MPICONSTANTS_SIGNED_CHAR, libmpiconstants), MPI_Datatype))
global MPI_UINT16_T = unsafe_load(cglobal((:MPICONSTANTS_UINT16_T, libmpiconstants), MPI_Datatype))
global MPI_UINT32_T = unsafe_load(cglobal((:MPICONSTANTS_UINT32_T, libmpiconstants), MPI_Datatype))
global MPI_UINT64_T = unsafe_load(cglobal((:MPICONSTANTS_UINT64_T, libmpiconstants), MPI_Datatype))
global MPI_UINT8_T = unsafe_load(cglobal((:MPICONSTANTS_UINT8_T, libmpiconstants), MPI_Datatype))
global MPI_UNSIGNED = unsafe_load(cglobal((:MPICONSTANTS_UNSIGNED, libmpiconstants), MPI_Datatype))
global MPI_UNSIGNED_CHAR = unsafe_load(cglobal((:MPICONSTANTS_UNSIGNED_CHAR, libmpiconstants), MPI_Datatype))
global MPI_UNSIGNED_LONG = unsafe_load(cglobal((:MPICONSTANTS_UNSIGNED_LONG, libmpiconstants), MPI_Datatype))
global MPI_UNSIGNED_LONG_LONG = unsafe_load(cglobal((:MPICONSTANTS_UNSIGNED_LONG_LONG, libmpiconstants), MPI_Datatype))
global MPI_UNSIGNED_SHORT = unsafe_load(cglobal((:MPICONSTANTS_UNSIGNED_SHORT, libmpiconstants), MPI_Datatype))
global MPI_WCHAR = unsafe_load(cglobal((:MPICONSTANTS_WCHAR, libmpiconstants), MPI_Datatype))

global MPI_NULL_DELETE_FN = unsafe_load(cglobal((:MPICONSTANTS_NULL_DELETE_FN, libmpiconstants), MPI_Delete_function))

global MPI_ERRHANDLER_NULL = unsafe_load(cglobal((:MPICONSTANTS_ERRHANDLER_NULL, libmpiconstants), MPI_Errhandler))
global MPI_ERRORS_ARE_FATAL = unsafe_load(cglobal((:MPICONSTANTS_ERRORS_ARE_FATAL, libmpiconstants), MPI_Errhandler))
global MPI_ERRORS_RETURN = unsafe_load(cglobal((:MPICONSTANTS_ERRORS_RETURN, libmpiconstants), MPI_Errhandler))

global MPI_FILE_NULL = unsafe_load(cglobal((:MPICONSTANTS_FILE_NULL, libmpiconstants), MPI_File))

global MPI_GROUP_EMPTY = unsafe_load(cglobal((:MPICONSTANTS_GROUP_EMPTY, libmpiconstants), MPI_Group))
global MPI_GROUP_NULL = unsafe_load(cglobal((:MPICONSTANTS_GROUP_NULL, libmpiconstants), MPI_Group))

global MPI_INFO_ENV = unsafe_load(cglobal((:MPICONSTANTS_INFO_ENV, libmpiconstants), MPI_Info))
global MPI_INFO_NULL = unsafe_load(cglobal((:MPICONSTANTS_INFO_NULL, libmpiconstants), MPI_Info))

global MPI_MESSAGE_NO_PROC = unsafe_load(cglobal((:MPICONSTANTS_MESSAGE_NO_PROC, libmpiconstants), MPI_Message))
global MPI_MESSAGE_NULL = unsafe_load(cglobal((:MPICONSTANTS_MESSAGE_NULL, libmpiconstants), MPI_Message))

global MPI_DISPLACEMENT_CURRENT = unsafe_load(cglobal((:MPICONSTANTS_DISPLACEMENT_CURRENT, libmpiconstants), MPI_Offset))

global MPI_BAND = unsafe_load(cglobal((:MPICONSTANTS_BAND, libmpiconstants), MPI_Op))
global MPI_BOR = unsafe_load(cglobal((:MPICONSTANTS_BOR, libmpiconstants), MPI_Op))
global MPI_BXOR = unsafe_load(cglobal((:MPICONSTANTS_BXOR, libmpiconstants), MPI_Op))
global MPI_LAND = unsafe_load(cglobal((:MPICONSTANTS_LAND, libmpiconstants), MPI_Op))
global MPI_LOR = unsafe_load(cglobal((:MPICONSTANTS_LOR, libmpiconstants), MPI_Op))
global MPI_LXOR = unsafe_load(cglobal((:MPICONSTANTS_LXOR, libmpiconstants), MPI_Op))
global MPI_MAX = unsafe_load(cglobal((:MPICONSTANTS_MAX, libmpiconstants), MPI_Op))
global MPI_MAXLOC = unsafe_load(cglobal((:MPICONSTANTS_MAXLOC, libmpiconstants), MPI_Op))
global MPI_MIN = unsafe_load(cglobal((:MPICONSTANTS_MIN, libmpiconstants), MPI_Op))
global MPI_MINLOC = unsafe_load(cglobal((:MPICONSTANTS_MINLOC, libmpiconstants), MPI_Op))
global MPI_NO_OP = unsafe_load(cglobal((:MPICONSTANTS_NO_OP, libmpiconstants), MPI_Op))
global MPI_OP_NULL = unsafe_load(cglobal((:MPICONSTANTS_OP_NULL, libmpiconstants), MPI_Op))
global MPI_PROD = unsafe_load(cglobal((:MPICONSTANTS_PROD, libmpiconstants), MPI_Op))
global MPI_REPLACE = unsafe_load(cglobal((:MPICONSTANTS_REPLACE, libmpiconstants), MPI_Op))
global MPI_SUM = unsafe_load(cglobal((:MPICONSTANTS_SUM, libmpiconstants), MPI_Op))

global MPI_REQUEST_NULL = unsafe_load(cglobal((:MPICONSTANTS_REQUEST_NULL, libmpiconstants), MPI_Request))

global MPI_STATUS_IGNORE = unsafe_load(cglobal((:MPICONSTANTS_STATUS_IGNORE, libmpiconstants), Ptr{MPI_Status}))
global MPI_STATUSES_IGNORE = unsafe_load(cglobal((:MPICONSTANTS_STATUSES_IGNORE, libmpiconstants), Ptr{MPI_Status}))

global MPI_TYPE_DUP_FN = unsafe_load(cglobal((:MPICONSTANTS_TYPE_DUP_FN, libmpiconstants), MPI_Type_copy_attr_function))

global MPI_TYPE_NULL_COPY_FN = unsafe_load(cglobal((:MPICONSTANTS_TYPE_NULL_COPY_FN, libmpiconstants), MPI_Type_copy_attr_function))

global MPI_TYPE_NULL_DELETE_FN = unsafe_load(cglobal((:MPICONSTANTS_TYPE_NULL_DELETE_FN, libmpiconstants), MPI_Type_delete_attr_function))

global MPI_WIN_NULL = unsafe_load(cglobal((:MPICONSTANTS_WIN_NULL, libmpiconstants), MPI_Win))

global MPI_WIN_DUP_FN = unsafe_load(cglobal((:MPICONSTANTS_WIN_DUP_FN, libmpiconstants), MPI_Win_copy_attr_function))
global MPI_WIN_NULL_COPY_FN = unsafe_load(cglobal((:MPICONSTANTS_WIN_NULL_COPY_FN, libmpiconstants), MPI_Win_copy_attr_function))

global MPI_WIN_NULL_DELETE_FN = unsafe_load(cglobal((:MPICONSTANTS_WIN_NULL_DELETE_FN, libmpiconstants), MPI_Win_delete_attr_function))

else # if Sys.iswindows()

# MicrosoftMPI only supports the standard MPI 2.0, so not all
# constants are available. (Julia generally supports MPI 3.1.)

global MPI_ANY_SOURCE = Cint(-2)
global MPI_ANY_TAG = Cint(-1)
global MPI_PROC_NULL = Cint(-1)
global MPI_ROOT = Cint(-3)
global MPI_CART = Cint(2)
global MPI_DIST_GRAPH = Cint(3)
global MPI_GRAPH = Cint(1)
global MPI_CONGRUENT = Cint(1)
global MPI_IDENT = Cint(0)
global MPI_SIMILAR = Cint(2)
global MPI_UNEQUAL = Cint(3)
global MPI_KEYVAL_INVALID = Cint(0x24000000)
global MPI_UNDEFINED = Cint(-32766)
global MPI_APPNUM = Cint(0x6440000d)
global MPI_HOST = Cint(0x64400003)
global MPI_IO = Cint(0x64400005)
global MPI_LASTUSEDCODE = Cint(0x6440000b)
global MPI_TAG_UB = Cint(0x64400001)
global MPI_UNIVERSE_SIZE = Cint(0x64400009)
global MPI_WIN_BASE = Cint(0x66000001)
global MPI_WIN_CREATE_FLAVOR = Cint(0x66000007)
global MPI_WIN_DISP_UNIT = Cint(0x66000005)
global MPI_WIN_MODEL = Cint(0x66000009)
global MPI_WIN_SIZE = Cint(0x66000003)
global MPI_WTIME_IS_GLOBAL = Cint(0x64400007)
global MPI_COMBINER_CONTIGUOUS = Cint(3)
global MPI_COMBINER_DARRAY = Cint(14)
global MPI_COMBINER_DUP = Cint(2)
global MPI_COMBINER_F90_COMPLEX = Cint(16)
global MPI_COMBINER_F90_INTEGER = Cint(17)
global MPI_COMBINER_F90_REAL = Cint(15)
global MPI_COMBINER_HINDEXED = Cint(9)
global MPI_COMBINER_HINDEXED_BLOCK = nothing
global MPI_COMBINER_HVECTOR = Cint(6)
global MPI_COMBINER_INDEXED = Cint(7)
global MPI_COMBINER_INDEXED_BLOCK = Cint(10)
global MPI_COMBINER_NAMED = Cint(1)
global MPI_COMBINER_RESIZED = Cint(18)
global MPI_COMBINER_STRUCT = Cint(12)
global MPI_COMBINER_SUBARRAY = Cint(13)
global MPI_COMBINER_VECTOR = Cint(4)
global MPI_COMM_TYPE_SHARED = Cint(1)
global MPI_DISTRIBUTE_BLOCK = Cint(121)
global MPI_DISTRIBUTE_CYCLIC = Cint(122)
global MPI_DISTRIBUTE_NONE = Cint(123)
global MPI_ERR_ACCESS = Cint(20)
global MPI_ERR_AMODE = Cint(21)
global MPI_ERR_ARG = Cint(12)
global MPI_ERR_ASSERT = Cint(53)
global MPI_ERR_BAD_FILE = Cint(22)
global MPI_ERR_BASE = Cint(46)
global MPI_ERR_BUFFER = Cint(1)
global MPI_ERR_COMM = Cint(5)
global MPI_ERR_CONVERSION = Cint(23)
global MPI_ERR_COUNT = Cint(2)
global MPI_ERR_DIMS = Cint(11)
global MPI_ERR_DISP = Cint(52)
global MPI_ERR_DUP_DATAREP = Cint(24)
global MPI_ERR_FILE = Cint(27)
global MPI_ERR_FILE_EXISTS = Cint(25)
global MPI_ERR_FILE_IN_USE = Cint(26)
global MPI_ERR_GROUP = Cint(8)
global MPI_ERR_INFO = Cint(28)
global MPI_ERR_INFO_KEY = Cint(29)
global MPI_ERR_INFO_NOKEY = Cint(31)
global MPI_ERR_INFO_VALUE = Cint(30)
global MPI_ERR_INTERN = Cint(16)
global MPI_ERR_IN_STATUS = Cint(17)
global MPI_ERR_IO = Cint(32)
global MPI_ERR_KEYVAL = Cint(48)
global MPI_ERR_LASTCODE = Cint(0x3fffffff)
global MPI_ERR_LOCKTYPE = Cint(47)
global MPI_ERR_NAME = Cint(33)
global MPI_ERR_NOT_SAME = Cint(35)
global MPI_ERR_NO_MEM = Cint(34)
global MPI_ERR_NO_SPACE = Cint(36)
global MPI_ERR_NO_SUCH_FILE = Cint(37)
global MPI_ERR_OP = Cint(9)
global MPI_ERR_OTHER = Cint(15)
global MPI_ERR_PENDING = Cint(18)
global MPI_ERR_PORT = Cint(38)
global MPI_ERR_QUOTA = Cint(39)
global MPI_ERR_RANK = Cint(6)
global MPI_ERR_READ_ONLY = Cint(40)
global MPI_ERR_REQUEST = Cint(19)
global MPI_ERR_RMA_ATTACH = nothing
global MPI_ERR_RMA_CONFLICT = Cint(49)
global MPI_ERR_RMA_FLAVOR = nothing
global MPI_ERR_RMA_RANGE = nothing
global MPI_ERR_RMA_SHARED = nothing
global MPI_ERR_RMA_SYNC = Cint(50)
global MPI_ERR_ROOT = Cint(7)
global MPI_ERR_SERVICE = Cint(41)
global MPI_ERR_SIZE = Cint(51)
global MPI_ERR_SPAWN = nothing
global MPI_ERR_TAG = Cint(4)
global MPI_ERR_TOPOLOGY = Cint(10)
global MPI_ERR_TRUNCATE = Cint(14)
global MPI_ERR_TYPE = Cint(3)
global MPI_ERR_UNKNOWN = Cint(13)
global MPI_ERR_UNSUPPORTED_DATAREP = nothing
global MPI_ERR_UNSUPPORTED_OPERATION = nothing
global MPI_ERR_WIN = Cint(45)
# We special-case MPI_SUCCESS which is required to be 0
# global MPI_SUCCESS = Cint(0)
@assert MPI_SUCCESS == 0
global MPI_LOCK_EXCLUSIVE = Cint(234)
global MPI_LOCK_SHARED = Cint(235)
global MPI_MODE_APPEND = Cint(0x00000080)
global MPI_MODE_CREATE = Cint(0x00000001)
global MPI_MODE_DELETE_ON_CLOSE = Cint(0x00000010)
global MPI_MODE_EXCL = Cint(0x00000040)
global MPI_MODE_NOCHECK = Cint(1024)
global MPI_MODE_NOPRECEDE = Cint(8192)
global MPI_MODE_NOPUT = Cint(4096)
global MPI_MODE_NOSTORE = Cint(2048)
global MPI_MODE_NOSUCCEED = Cint(16384)
global MPI_MODE_RDONLY = Cint(0x00000002)
global MPI_MODE_RDWR = Cint(0x00000008)
global MPI_MODE_SEQUENTIAL = Cint(0x00000100)
global MPI_MODE_UNIQUE_OPEN = Cint(0x00000020)
global MPI_MODE_WRONLY = Cint(0x00000004)
global MPI_ORDER_C = Cint(56)
global MPI_ORDER_FORTRAN = Cint(57)
global MPI_SEEK_CUR = Cint(602)
global MPI_SEEK_END = Cint(604)
global MPI_SEEK_SET = Cint(600)
global MPI_THREAD_SINGLE = Cint(0)
global MPI_THREAD_FUNNELED = Cint(1)
global MPI_THREAD_SERIALIZED = Cint(2)
global MPI_THREAD_MULTIPLE = Cint(3)
global MPI_TYPECLASS_COMPLEX = Cint(3)
global MPI_TYPECLASS_INTEGER = Cint(2)
global MPI_TYPECLASS_REAL = Cint(1)

global MPI_ARGV_NULL = Ptr{Ptr{Cchar}}(0)
global MPI_ARGVS_NULL = Ptr{Ptr{Ptr{Cchar}}}(0)
# global MPI_UNWEIGHTED = nothing
# global MPI_WEIGHTS_EMPTY = nothing
global MPI_BOTTOM = Ptr{Cvoid}(0)
global MPI_IN_PLACE = Ptr{Cvoid}(-1)

global MPI_COMM_NULL = MPI_Comm(0x04000000)
global MPI_COMM_SELF = MPI_Comm(0x44000001)
global MPI_COMM_WORLD = MPI_Comm(0x44000000)

global MPI_COMM_DUP_FN = MPI_Comm_copy_attr_function(cglobal((:MPIR_Dup_fn, libmpi)))

global MPI_COMM_NULL_COPY_FN = MPI_Comm_copy_attr_function(0)

global MPI_COMM_NULL_DELETE_FN = MPI_Comm_delete_attr_function(0)

global MPI_NULL_COPY_FN = MPI_Copy_function(0)

global MPI_2DOUBLE_PRECISION = MPI_Datatype(0x4c001023)
global MPI_2INT = MPI_Datatype(0x4c000816)
global MPI_2INTEGER = MPI_Datatype(0x4c000820)
global MPI_2REAL = MPI_Datatype(0x4c000821)
global MPI_AINT = Sys.ARCH ≡ :x86_64 ? MPI_Datatype(0x4c00083b) : MPI_Datatype(0x4c00043b)
global MPI_BYTE = MPI_Datatype(0x4c00010d)
global MPI_CHAR = MPI_Datatype(0x4c000101)
global MPI_CHARACTER = MPI_Datatype(0x4c00011a)
global MPI_COMPLEX = MPI_Datatype(0x4c00081e)
global MPI_COMPLEX16 = MPI_Datatype(0x4c00102a)
# global MPI_COMPLEX32 = nothing
global MPI_COMPLEX8 = MPI_Datatype(0x4c000828)
global MPI_COUNT = MPI_Datatype(0x4c000845)
global MPI_CXX_BOOL = MPI_Datatype(0x4c000133)
global MPI_CXX_DOUBLE_COMPLEX = MPI_Datatype(0x4c001035)
global MPI_CXX_FLOAT_COMPLEX = MPI_Datatype(0x4c000834)
global MPI_CXX_LONG_DOUBLE_COMPLEX = MPI_Datatype(0x4c002036)
global MPI_C_BOOL = MPI_Datatype(0x4c000117)
global MPI_C_COMPLEX = MPI_Datatype(0x4c000812)
global MPI_C_DOUBLE_COMPLEX = MPI_Datatype(0x4c001014)
global MPI_C_FLOAT_COMPLEX = MPI_Datatype(0x4c000813)
global MPI_C_LONG_DOUBLE_COMPLEX = MPI_Datatype(0x4c001015)
global MPI_DATATYPE_NULL = MPI_Datatype(0x0c000000)
global MPI_DOUBLE = MPI_Datatype(0x4c00080b)
global MPI_DOUBLE_COMPLEX = MPI_Datatype(0x4c001022)
global MPI_DOUBLE_INT = MPI_Datatype(0x8c000001)
global MPI_DOUBLE_PRECISION = MPI_Datatype(0x4c00081f)
global MPI_FLOAT = MPI_Datatype(0x4c00040a)
global MPI_FLOAT_INT = MPI_Datatype(0x8c000000)
global MPI_INT = MPI_Datatype(0x4c000405)
global MPI_INT16_T = MPI_Datatype(0x4c000234)
global MPI_INT32_T = MPI_Datatype(0x4c000435)
global MPI_INT64_T = MPI_Datatype(0x4c000836)
global MPI_INT8_T = MPI_Datatype(0x4c000133)
global MPI_INTEGER = MPI_Datatype(0x4c00041b)
global MPI_INTEGER1 = MPI_Datatype(0x4c00012d)
global MPI_INTEGER2 = MPI_Datatype(0x4c00022f)
global MPI_INTEGER4 = MPI_Datatype(0x4c000430)
global MPI_INTEGER8 = MPI_Datatype(0x4c000831)
global MPI_LOGICAL = MPI_Datatype(0x4c00041d)
global MPI_LONG = MPI_Datatype(0x4c000407)
global MPI_LONG_DOUBLE = MPI_Datatype(0x4c00080c)
global MPI_LONG_DOUBLE_INT = MPI_Datatype(0x8c000004)
global MPI_LONG_INT = MPI_Datatype(0x8c000002)
global MPI_LONG_LONG = MPI_Datatype(0x4c000809)
global MPI_LONG_LONG_INT = MPI_Datatype(0x4c000809)
global MPI_OFFSET = MPI_Datatype(0x4c000844)
global MPI_PACKED = MPI_Datatype(0x4c00010f)
global MPI_REAL = MPI_Datatype(0x4c00041c)
# global MPI_REAL16 = nothing
global MPI_REAL4 = MPI_Datatype(0x4c000427)
global MPI_REAL8 = MPI_Datatype(0x4c000829)
global MPI_SHORT = MPI_Datatype(0x4c000203)
global MPI_SHORT_INT = MPI_Datatype(0x8c000003)
global MPI_SIGNED_CHAR = MPI_Datatype(0x4c000118)
global MPI_UINT16_T = MPI_Datatype(0x4c000238)
global MPI_UINT32_T = MPI_Datatype(0x4c000439)
global MPI_UINT64_T = MPI_Datatype(0x4c00083a)
global MPI_UINT8_T = MPI_Datatype(0x4c000137)
global MPI_UNSIGNED = MPI_Datatype(0x4c000406)
global MPI_UNSIGNED_CHAR = MPI_Datatype(0x4c000102)
global MPI_UNSIGNED_LONG = MPI_Datatype(0x4c000408)
global MPI_UNSIGNED_LONG_LONG = MPI_Datatype(0x4c000819)
global MPI_UNSIGNED_SHORT = MPI_Datatype(0x4c000204)
global MPI_WCHAR = MPI_Datatype(0x4c00040e)

global MPI_NULL_DELETE_FN = MPI_Delete_function(0)

global MPI_ERRHANDLER_NULL = MPI_Errhandler(0x14000000)
global MPI_ERRORS_ARE_FATAL = MPI_Errhandler(0x54000000)
global MPI_ERRORS_RETURN = MPI_Errhandler(0x54000001)

global MPI_FILE_NULL = MPI_File(0)

global MPI_GROUP_EMPTY = MPI_Group(0x48000000)
global MPI_GROUP_NULL = MPI_Group(0x08000000)

global MPI_INFO_ENV = nothing
global MPI_INFO_NULL = MPI_Info(0x1c000000)

global MPI_MESSAGE_NO_PROC = MPI_Message(0x6c000000)
global MPI_MESSAGE_NULL = MPI_Message(0x2c000000)

global MPI_DISPLACEMENT_CURRENT = MPI_Offset(-54278278)

global MPI_BAND = MPI_Op(0x58000006)
global MPI_BOR = MPI_Op(0x58000008)
global MPI_BXOR = MPI_Op(0x5800000a)
global MPI_LAND = MPI_Op(0x58000005)
global MPI_LOR = MPI_Op(0x58000007)
global MPI_LXOR = MPI_Op(0x58000009)
global MPI_MAX = MPI_Op(0x58000001)
global MPI_MAXLOC = MPI_Op(0x5800000c)
global MPI_MIN = MPI_Op(0x58000002)
global MPI_MINLOC = MPI_Op(0x5800000b)
global MPI_NO_OP = MPI_Op(0x5800000e)
global MPI_OP_NULL = MPI_Op(0x18000000)
global MPI_PROD = MPI_Op(0x58000004)
global MPI_REPLACE = MPI_Op(0x5800000d)
global MPI_SUM = MPI_Op(0x58000003)

global MPI_REQUEST_NULL = MPI_Request(0x2c000000)

global MPI_STATUS_IGNORE = Ptr{MPI_Status}(1)
global MPI_STATUSES_IGNORE = Ptr{MPI_Status}(1)

global MPI_TYPE_DUP_FN = MPI_Type_copy_attr_function(cglobal((:MPIR_Dup_fn, libmpi)))

global MPI_TYPE_NULL_COPY_FN = MPI_Type_copy_attr_function(0)

global MPI_TYPE_NULL_DELETE_FN = MPI_Type_delete_attr_function(0)

global MPI_WIN_NULL = MPI_Win(0x20000000)

global MPI_WIN_DUP_FN = MPI_Win_copy_attr_function(cglobal((:MPIR_Dup_fn, libmpi)))
global MPI_WIN_NULL_COPY_FN = MPI_Win_copy_attr_function(0)

global MPI_WIN_NULL_DELETE_FN = MPI_Win_delete_attr_function(0)

end # if Sys.iswindows()

finished_loading[] = true
run_load_time_hooks()

end
