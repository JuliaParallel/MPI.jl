using Libdl


MPI_PATH = get(ENV, "JULIA_MPI_PATH", nothing)
MPI_LIBRARY_PATH = get(ENV, "JULIA_MPI_LIBRARY_PATH") do
    MPI_PATH !== nothing ? joinpath(MPI_PATH,"lib") : nothing
end
MPI_INCLUDE_PATH = get(ENV, "JULIA_MPI_INCLUDE_PATH") do
    MPI_PATH !== nothing ? joinpath(MPI_PATH,"include") : nothing
end
mpicc = get(ENV, "JULIA_MPICC") do
    if MPI_PATH !== nothing
        joinpath(MPI_PATH,"bin","mpicc")
    else
        "mpicc"
    end
end

const mpiexec_path = get(ENV, "JULIA_MPIEXEC") do
    if MPI_PATH !== nothing && Sys.isexecutable(joinpath(MPI_PATH,"bin","mpiexec"))
        joinpath(MPI_PATH,"bin","mpiexec")
    else
        Sys.which("mpiexec")
    end
end

const mpiexec_args = split(get(ENV, "JULIA_MPIEXEC_ARGS", ""))

const libmpi = get(ENV, "JULIA_MPI_LIBRARY") do
    libmpi = find_library(["libmpi", "libmpi_ibm", "msmpi", "libmpich"],
                          MPI_LIBRARY_PATH !== nothing ? [MPI_LIBRARY_PATH] : [])
    if libmpi == ""
        error("No MPI library found.\nEnsure an MPI implementation is loaded, or set the `JULIA_MPI_PATH` variable.")
    end
    # expand paths
    dlpath(libmpi)
end


if haskey(ENV, "JULIA_MPI_CFLAGS")
    CFLAGS = split(ENV["JULIA_MPI_CFLAGS"])
else
    lname, = split(basename(libmpi),'.')
    if startswith(lname, "lib")
        lname = lname[4:end]
    end
    CFLAGS = ["-l$lname"]
    if MPI_LIBRARY_PATH !== nothing
        push!(CFLAGS, "-L$(MPI_LIBRARY_PATH)")
    end
    if MPI_INCLUDE_PATH !== nothing
        push!(CFLAGS, "-I$(MPI_INCLUDE_PATH)")
    end
end

libsize = filesize(libmpi)

@info "Using MPI library $libmpi"

function Get_version()
    major = Ref{Cint}()
    minor = Ref{Cint}()
    if Sys.iswindows()
        ccall((:MPI_Get_version, libmpi), stdcall, Cint,
              (Ptr{Cint}, Ptr{Cint}), major, minor)
    else
        ccall((:MPI_Get_version, libmpi), Cint,
              (Ptr{Cint}, Ptr{Cint}), major, minor)
    end
    VersionNumber(major[], minor[])
end

MPI_VERSION = Get_version()

@info "MPI version:\n$(MPI_VERSION)"

function Get_library_version()
    # There is no way to query at runtime what the length of the buffer should be.  
    # https://github.com/mpi-forum/mpi-issues/issues/159    
    # 8192 is the maximum value of MPI_MAX_LIBRARY_VERSION_STRING across known
    # implementations.
    buf = Array{UInt8}(undef, 8192)
    buflen = Ref{Cint}()
    if Sys.iswindows()
        ccall((:MPI_Get_library_version, libmpi), stdcall, Cint, (Ptr{UInt8}, Ref{Cint}), buf, buflen)
    else
        ccall((:MPI_Get_library_version, libmpi), Cint, (Ptr{UInt8}, Ref{Cint}), buf, buflen)
    end        
    resize!(buf, buflen[])
    return String(buf)
end

MPI_LIBRARY_VERSION_STRING = Get_library_version()

@info "MPI library version:\n$(MPI_LIBRARY_VERSION_STRING)"

open("deps.jl","w") do f
    println(f, "# This file is automatically generated")
    println(f, "# Do not edit")
    println(f)
    println(f, :(const libmpi = $libmpi))
    println(f, :(const libmpi_size = $libsize))
    println(f, :(const MPI_VERSION = $MPI_VERSION))
    println(f, :(const MPI_LIBRARY_VERSION_STRING = $MPI_LIBRARY_VERSION_STRING))
    println(f, :(const mpiexec_path = $mpiexec_path))

    if Sys.iswindows()
        println(f, :(include("consts_msmpi.jl")))
    else
        include("gen_consts.jl")

        run(`$mpicc gen_consts.c -o gen_consts $CFLAGS`)
        run(`$mpiexec_path $mpiexec_args -n 1 ./gen_consts`)

        println(f, :(include("consts.jl")))
    end
end
