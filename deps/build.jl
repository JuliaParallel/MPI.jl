using Libdl

MPI_PATH = get(ENV, "JULIA_MPI_PATH", nothing)
MPI_LIBRARY_PATH = get(ENV, "JULIA_MPI_LIBRARY_PATH") do
    MPI_PATH !== nothing ? joinpath(MPI_PATH,"lib") : nothing
end
MPI_INCLUDE_PATH = get(ENV, "JULIA_MPI_INCLUDE_PATH") do
    MPI_PATH !== nothing ? joinpath(MPI_PATH,"include") : nothing
end
mpicc = get(ENV, "JULIA_MPICC") do
    if MPI_PATH !== nothing
        joinpath(MPI_PATH,"bin","mpicc")
    else
        "mpicc"
    end
end

mpiexec = get(ENV, "JULIA_MPIEXEC") do
    if MPI_PATH !== nothing
        joinpath(MPI_PATH,"bin","mpiexec")
    else
        "mpiexec"
    end
end

if haskey(ENV, "JULIA_MPI_CFLAGS")
    CFLAGS = split(ENV["JULIA_MPI_CFLAGS"])
else
    CFLAGS = ["-lmpi"]
    if MPI_LIBRARY_PATH !== nothing
        push!(CFLAGS, "-L$(MPI_LIBRARY_PATH)")
    end
    if MPI_INCLUDE_PATH !== nothing
        push!(CFLAGS, "-I$(MPI_INCLUDE_PATH)")
    end
end

const libmpi = find_library(Sys.iswindows() ? "msmpi.dll" : "libmpi",
                            MPI_LIBRARY_PATH !== nothing ? [MPI_LIBRARY_PATH] : [])

libptr = dlopen_e(libmpi)
if libmpi == "" || libptr == C_NULL
    error("No MPI library found")
end
@info "Using MPI library $libmpi"

libpath = dlpath(libptr)
libsize = filesize(libpath)

function Get_version()
    major = Ref{Cint}()
    minor = Ref{Cint}()
    if Sys.iswindows()
        ccall((:MPI_Get_version, libmpi), stdcall, Cint,
              (Ptr{Cint}, Ptr{Cint}), major, minor)
    else
        ccall((:MPI_Get_version, libmpi), Cint,
              (Ptr{Cint}, Ptr{Cint}), major, minor)
    end
    VersionNumber(major[], minor[])
end

MPI_VERSION = Get_version()


open("deps.jl","w") do f
    println(f, "# This file is automatically generated")
    println(f, "# Do not edit")
    println(f)
    println(f, :(const libmpi = $libmpi))
    println(f, :(const libmpi_size = $libsize))
    println(f, :(const MPI_VERSION = $MPI_VERSION))
    println(f, :(const mpiexec = $mpiexec))
end

if Sys.iswindows()
    open("deps.jl","a") do f
        println(f, :(include("consts_msmpi.jl")))
    end
else
    include("gen_consts.jl")

    run(`$mpicc gen_consts.c -o gen_consts $CFLAGS`)

    open("deps.jl","a") do f
        run(pipeline(`./gen_consts`, stdout = f))
    end
end
