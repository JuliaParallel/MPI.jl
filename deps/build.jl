_doc_external(fname) = ""

include(joinpath("..","src","paths.jl"))
include(joinpath("..","src","implementations.jl"))

if MPI_LIBRARY_ABI != UnknownABI
    # constants provided under src/consts/
    exit(0)
end

@info "Uknown MPI ABI: building constants file"

MPI_PATH = get(ENV, "JULIA_MPI_PATH", nothing)
MPI_LIBRARY_PATH = get(ENV, "JULIA_MPI_LIBRARY_PATH") do
    MPI_PATH !== nothing ? joinpath(MPI_PATH,"lib") : nothing
end
MPI_INCLUDE_PATH = get(ENV, "JULIA_MPI_INCLUDE_PATH") do
    MPI_PATH !== nothing ? joinpath(MPI_PATH,"include") : nothing
end

mpicc = get(ENV, "JULIA_MPICC") do
    if MPI_PATH !== nothing
        joinpath(MPI_PATH,"bin","mpicc")
    else
        "mpicc"
    end
end

if haskey(ENV, "JULIA_MPI_CFLAGS")
    CFLAGS = split(ENV["JULIA_MPI_CFLAGS"])
else
    lname, = split(basename(libmpi),'.')
    if startswith(lname, "lib")
        lname = lname[4:end]
    end
    CFLAGS = ["-l$lname"]
    if MPI_LIBRARY_PATH !== nothing
        push!(CFLAGS, "-L$(MPI_LIBRARY_PATH)")
    end
    if MPI_INCLUDE_PATH !== nothing
        push!(CFLAGS, "-I$(MPI_INCLUDE_PATH)")
    end
end

include("gen_consts.jl")

run(`$mpicc gen_consts.c -o gen_consts $CFLAGS`)

open("consts.jl","w") do f
    println(f, "# This file is automatically generated")
    println(f, "# Do not edit")
    println(f)
    println(f, :(MPI_LIBRARY_VERSION_STRING == $MPI_LIBRARY_VERSION_STRING || error("MPI library changed, re-run Pkg.build(\"MPI\")")))
    println(f)
end

mpiexec(cmd -> run(`$cmd -n 1 ./gen_consts`))

